
一、synchronized
	1.1、synchronized可以作用在哪些地方，区别？
	1.2、synchronized 面试题
	1.3、
二、线程sleep和wait有什么区别。及延伸。yield，join,notify ,notifyAll等使用？
	2.1、线程sleep和wait有什么区别
		https://blog.csdn.net/liuzhenwen/article/details/4202967
		https://www.cnblogs.com/loren-Yang/p/7538482.html
	2.2、sleep() 和 wait()的区别（Java面试题）
		https://blog.csdn.net/alan_gaohaodong/article/details/85264609
	2.3、java中sleep（）方法的解析
		https://www.cnblogs.com/yinbiao/p/10179563.html
三、synchronized 和volatile 关键字的区别 

四、ReentrantLock 、synchronized和volatile比较

五、谈谈对Synchronized关键字，类锁，方法锁，重入锁的理解 
		java的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的
六、详解synchronized与Lock的区别与使用
	https://blog.csdn.net/u012403290/article/details/64910926
七、synchronized的四种用法
	https://blog.csdn.net/sinat_32588261/article/details/72880159
	
	java中synchronized用法
	https://blog.csdn.net/luoweifu/article/details/46613015
	
	https://blog.csdn.net/chenguang79/article/details/677720
	
八、记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象
	8.1、初步验证，是一样的。【待进一步验证】
九、ReenTrantLock可重入锁（和synchronized的区别）总结
	https://blog.csdn.net/qq838642798/article/details/65441415
十、java可重入锁(ReentrantLock)的实现原理
	https://blog.csdn.net/yanyan19880509/article/details/52345422
十一、究竟什么是可重入锁？
	https://blog.csdn.net/rickiyeat/article/details/78314451
十二、【Java并发编程】AtomicReference 原子引用
	https://blog.csdn.net/fxkcsdn/article/details/82261972
	
	12.2、AtomicReference 原子引用
	https://blog.csdn.net/chuchus/article/details/50801993
		赋值操作不是线程安全的。若想不用锁来实现，可以用AtomicReference<V>这个类，实现对象引用的原子更新。【待验证】
	12.3、史上最简单易懂的 AtomicReference 源码解析和使用
		https://blog.csdn.net/weixin_42670455/article/details/83074734
十三、Java并发编程三个性质：原子性、可见性、有序性
	13.1、https://blog.csdn.net/weixin_38843156/article/details/80227084
	
	13.2、java并发之原子性与可见性(一)
		https://blog.csdn.net/maosijunzi/article/details/18315013
		
		原子性
		原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。
		再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。
		一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。

		可见性
		可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。
		比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。
		但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。
		比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就这这个操作同样存在线程安全问题。
		--------------------- 
	13.3、Java多线程中提到的原子性和可见性、有序性
		https://blog.csdn.net/jaryle/article/details/51442192	
十四、volatile 原理？
	14.1、volatile  修饰的变量a一般的操作是原子性的 ,而a++不是原子操作，为啥？
	14.2、Java并发编程：volatile关键字解析
		https://blog.csdn.net/u010999240/article/details/47382053
		
		https://www.cnblogs.com/dolphin0520/p/3920373.html（原文）
		
		
十五、手写生产者/消费者 模式
	13.1、https://blog.csdn.net/lettyisme/article/details/81174733
	13.2、	Java-经典消费者和生产者代码(面试题)
		https://blog.csdn.net/qq_33300026/article/details/83828507
	13.3、
		JAVA多线程之――经典面试消费者与生产者
		https://blog.csdn.net/pengdandezhi/article/details/66475814
	13.4、java多线程之生产者消费者经典问题
		【比较全面】
		https://blog.csdn.net/thinkpadshi/article/details/8163751
	13.5、秒杀多线程第十篇 生产者消费者问题
		https://blog.csdn.net/MoreWindows/article/details/7577591
	13.6
		Java多线程与并发(五)之生产者与消费者案例
		https://blog.csdn.net/u013144863/article/details/51392510
	13.7、【Java】生产者消费者模式的实现
		https://blog.csdn.net/u010983881/article/details/78554671
	13.8、Java的高并发编程系列（六）生产者消费者面试题解析
		https://blog.csdn.net/qq_34707744/article/details/79743056
	13.9、
		基于java的生产者和消费者三种实现方式
		https://blog.csdn.net/qq_16622819/article/details/79907523

