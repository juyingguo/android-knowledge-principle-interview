
一、synchronized
	1.1、synchronized可以作用在哪些地方，区别？
	1.2、synchronized 面试题
	1.3、Syschronized的底层实现原理以及各种锁的理解
		http://www.pianshen.com/article/13827882/
	1.4、synchronized能否阻止指令重排序。
	
二、线程sleep和wait有什么区别。及延伸。yield，join,notify ,notifyAll等使用？
	2.1、线程sleep和wait有什么区别
		https://blog.csdn.net/liuzhenwen/article/details/4202967
		https://www.cnblogs.com/loren-Yang/p/7538482.html
	2.2、sleep() 和 wait()的区别（Java面试题）
		https://blog.csdn.net/alan_gaohaodong/article/details/85264609
	2.3、java中sleep（）方法的解析
		https://www.cnblogs.com/yinbiao/p/10179563.html
	2.4、join方法，调用该方法等待该线程结束
		java 线程方法join的简单总结
		https://www.cnblogs.com/ldq2016/p/9045551.html
		
三、synchronized 和volatile 关键字的区别 
	
	3.1、原子性、内存可见性和重排序――重新认识synchronized和volatile	
		https://blog.csdn.net/ljheee/article/details/53152737
四、ReentrantLock 、synchronized和volatile比较

五、谈谈对Synchronized关键字，类锁，方法锁，重入锁的理解 
		java的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的
六、详解synchronized与Lock的区别与使用
	
	6.1、https://blog.csdn.net/u012403290/article/details/64910926
	
	6.2、Lock与synchronized 的区别
		含有【两种同步方式性能测试】
		https://www.cnblogs.com/nsw2018/p/5821738.html
		
七、synchronized的四种用法
	https://blog.csdn.net/sinat_32588261/article/details/72880159
	
	java中synchronized用法
	https://blog.csdn.net/luoweifu/article/details/46613015
	
	https://blog.csdn.net/chenguang79/article/details/677720
	
八、记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象
	8.1、初步验证，是一样的。【待进一步验证】
九、ReenTrantLock可重入锁（和synchronized的区别）总结
	https://blog.csdn.net/qq838642798/article/details/65441415
十、java可重入锁(ReentrantLock)的实现原理
	https://blog.csdn.net/yanyan19880509/article/details/52345422
十一、究竟什么是可重入锁？
	https://blog.csdn.net/rickiyeat/article/details/78314451
十二、【Java并发编程】AtomicReference 原子引用,
	https://blog.csdn.net/fxkcsdn/article/details/82261972
	
	12.2、AtomicReference 原子引用
	https://blog.csdn.net/chuchus/article/details/50801993
		赋值操作不是线程安全的。若想不用锁来实现，可以用AtomicReference<V>这个类，实现对象引用的原子更新。【待验证】
	12.3、史上最简单易懂的 AtomicReference 源码解析和使用
		https://blog.csdn.net/weixin_42670455/article/details/83074734
	12.4、AtomicInteger的用法，原理，
	12.5、AtomicInteger与volatile区别？
	12.6、Atomic系列
	
十三、Java并发编程三个性质：原子性、可见性、有序性
	13.1、https://blog.csdn.net/weixin_38843156/article/details/80227084
	
	13.2、java并发之原子性与可见性(一)
		https://blog.csdn.net/maosijunzi/article/details/18315013
		
		原子性
		原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。
		再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。
		一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。

		可见性
		可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。
		比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。
		但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。
		比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就这这个操作同样存在线程安全问题。
		--------------------- 
	13.3、Java多线程中提到的原子性和可见性、有序性
		https://blog.csdn.net/jaryle/article/details/51442192
	13.4、Java中的原子操作( atomic operations)
		https://www.cnblogs.com/Mainz/p/3546347.html
	
十四、volatile使用及原理？

	14.1、volatile  修饰的变量a一般的操作是原子性的 ,而a++不是原子操作，为啥？
	
	14.2、Java并发编程：volatile关键字解析
		https://blog.csdn.net/u010999240/article/details/47382053
		
		https://www.cnblogs.com/dolphin0520/p/3920373.html（原文）
	14.3、为什么volatile不能保证原子性而Atomic可以
		https://www.cnblogs.com/Mainz/p/3556430.html#
		https://blog.csdn.net/hupitao/article/details/45227891
	
	14.4、volatile特点总结
		volatile只能保证可见性及有序性，先读后写，在你写之前别人可能也在写，没法防止并发。
		至于AtomicInteger，首先有volatile value保证变量的可见性，再借助了CPU级指令CAS保证了原子性。
	
十五、手写生产者/消费者 模式
	13.1、https://blog.csdn.net/lettyisme/article/details/81174733
	13.2、	Java-经典消费者和生产者代码(面试题)
		https://blog.csdn.net/qq_33300026/article/details/83828507
	13.3、
		JAVA多线程之――经典面试消费者与生产者
		https://blog.csdn.net/pengdandezhi/article/details/66475814
	13.4、java多线程之生产者消费者经典问题
		【比较全面】，但也有问题，看评论
		https://blog.csdn.net/thinkpadshi/article/details/8163751
	13.5、秒杀多线程第十篇 生产者消费者问题
		https://blog.csdn.net/MoreWindows/article/details/7577591
	13.6
		Java多线程与并发(五)之生产者与消费者案例
		https://blog.csdn.net/u013144863/article/details/51392510
	13.7、【Java】生产者消费者模式的实现
		https://blog.csdn.net/u010983881/article/details/78554671
	13.8、Java的高并发编程系列（六）生产者消费者面试题解析
		https://blog.csdn.net/qq_34707744/article/details/79743056
	13.9、
		基于java的生产者和消费者三种实现方式
		https://blog.csdn.net/qq_16622819/article/details/79907523
	13.10，java 多线程并发系列之 生产者消费者模式的两种实现
		用了BlockingQueue
		https://blog.csdn.net/yujin753/article/details/45723175

十六、线程池，并发，锁等一系列问题
	
	16.1、这个可以扩展下 java如何自己实现一个线程池？
		http://www.vcchar.com/thread-29098-1-1.html
	16.2、一篇搞定 Java线程池 面试点
		https://www.nowcoder.com/discuss/152050?type=0&order=0&pos=6&page=0
		
	16.3、线程池使用？
	
	16.4、线程池原理，源码深度剖析？
	
	16.5、线程池使用了哪些集合框架，设计模式
	
	16.6、线程池使用了哪些设计模式 
	
十七、Java锁，Lock
	17.1、Java锁，Lock实现原理(底层实现)
		https://blog.csdn.net/Luxia_24/article/details/52403033
	17.2、Java锁，Lock使用，
		Lock：Lock实现和synchronized不一样，后者是一种悲观锁，它胆子很小，它很怕有人和它抢吃的，所以它每次吃东西前都把自己关起来。而Lock呢底层其实是CAS乐观锁的体现，它无所谓，别人抢了它吃的，它重新去拿吃的就好啦，所以它很乐观。具体底层怎么实现，博主不在细述，有机会的话，我会对concurrent包下面的机制好好和大家说说，如果面试问起，你就说底层主要靠volatile和CAS操作实现的。
		--------------------- 
		版权声明：本文为CSDN博主「淳安郭富城」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
		原文链接：https://blog.csdn.net/u012403290/article/details/64910926
十八、CAS是什么
		
	18.1、非阻塞同步算法与CAS(Compare and Swap)无锁算法
		https://www.cnblogs.com/Mainz/p/3546347.html
		
	
十九、Java并发编程之CountDownLatch、CyclicBarrier和Semaphore
	19.1、java中CyclicBarrier 的面试题
		「每天一道面试题」CyclicBarrier的实现原理？
		https://blog.csdn.net/weixin_34354945/article/details/86730713
	19.2、CyclicBarrier的介绍和使用
		http://wosyingjun.iteye.com/blog/2299857
	19.3、CountDownLatch的介绍和使用
		http://wosyingjun.iteye.com/blog/2223933
		
		CountDownLatch能保证线程顺序执行吗？这个要看情况，这是java.util.concurrent包里的一个同步辅助类，它有两个主要的常用方法  countDown（）方法以及await（）方法。在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。
		可以用来多个线程分段并发执行任务，用等待线程进行任务统计。
	19.4、 Semaphore的介绍和使用
		http://wosyingjun.iteye.com/blog/2299860
		
二十、面试题，多线程中，3个线程A,B,C,(同时开始执行，其中C处于阻塞状态)，如何确保当A,B执行结束后，C开始执行。
	20.1、思路1，wait ,notify ,join。
		
	20.2、jdk1.5后，新增的功能或类。
		使用CountDownLatch实现试试。
	
二十一、3个线程A,B,C，如何保证按照顺序执行？及线程A,B,C延伸？
	21.1、a,3个线程A,B,C，如何保证按照顺序执行？
			使用单线程池。
			ExecutorService executorService = Executors.newSingleThreadExecutor(); 
			https://someoneneedsme.iteye.com/blog/2041346	
		b,	多线程交替打印ABC的多种实现方法
			https://blog.csdn.net/xiaokang123456kao/article/details/77331878
	21.2、Java实现三个线程A B C，BC线程执行完再执行A线
		https://blog.csdn.net/yongpole/article/details/83549236
	
	21.3、java实现三个线程A B C，同时开始执行，C处于阻塞状态，当A,B运行结束后，C开始执行。
		类似：
		https://www.cnblogs.com/xinde123/p/7884973.html
	
二十二、一个问题，如果开启10个线程，但是需要这10个线程都执行完成后，再交由主线程统一输入，如何实现
	https://blog.csdn.net/guofangsky/article/details/82457800

二十三、BlockingQueue 数据集合系列  【和线程关联密切，暂时放倒这个模块中】
	
	23.1、BlockingQueue讲解 
		https://blog.51cto.com/12666319/2134330?source=dra 
		
	23.2、Java多线程进阶（三一）―― J.U.C之collections框架：BlockingQueue接口
		https://segmentfault.com/a/1190000016296278
	
	23.3、BlockingQueue深入解析－BlockingQueue看这一篇就够了 
		https://www.cnblogs.com/WangHaiMing/p/8798709.html 
		
二十四、ThreadLocal
	24.1 史上最全ThreadLocal 详解（一）
		https://blog.csdn.net/u010445301/article/details/111322569
		
		硬核剖析ThreadLocal源码，面试官看了直呼内行
		https://zhuanlan.zhihu.com/p/576975260
		
		调试：com.threadtest.threadlocaltest.ThreadLocalDemo
		含面试题：
			6.1 ThreadLocal是怎么保证数据安全性的？
			6.2 ThreadLocal底层为什么使用数组？而不是一个对象？
			6.3 ThreadLocal是怎么解决哈希冲突的？
			6.4 ThreadLocal为什么要用线性探测法解决哈希冲突？
			6.5 ThreadLocalMap的key为什么要设计成弱引用？
			6.6 ThreadLocal为什么会出现内存泄漏？
				{因为我们在使用ThreadLocal的时候，总爱把ThreadLocal设置成类的静态变量，直到线程生命周期结束，ThreadLocal对象数据
				才会被回收。
				如何理解？

				另一个是数组中Entry对象的value值，也就是泛型对象值。虽然ThreadLocalMap的key被设置成弱引用，会被GC回收，
				但是value并没有被回收。需要等到下次执行get、set方法遍历数组，遍历到这个位置，才会删除这个无效的value。
				这也是造成内存泄漏的原因之一。}
			6.7 怎么实现父子线程共享ThreadLocal数据？
	24.2 ThreadLocal原理。
		     0110 0001 1100 1000 1000 0110 0100 0111 # 0x61c88647
			 1100 0011 1001 0001 0000 1100 1000 1110 # (0x61c88647 * 2) =》n
		0001 1000 0111 0010 0010 0001 1001 0001 1100 # n*2->n2
		0010 0100 1010 1011 0011 0010 0101 1010 1010 # n*3->n3
		0011 0000 1110 0100 0100 0011 0010 0011 1000 # n*4->n4
		
		mask
		16*2=2的5次幂		
			10 0000
		16*2 - 1 
			01 1111 #mask
			0&mask =        0
			n&mask =     1110	=14
			n2&mask = 01 1100	=30
			n3&mask = 00 1010	=10
			n4&mask = 01 1000	=24
	14.3 疑问
		java.lang.ThreadLocal.ThreadLocalMap#table中每一个线程永远只有一个实体对象
		Entry，key为ThreadLocal，value为泛型值。
		设置不同值时，会替换value,因为key只有一个。
		java.lang.ThreadLocal.ThreadLocalMap#set
		
		14.3.2 java.lang.ThreadLocal.ThreadLocalMap#expungeStaleEntry
			清除算法。
		
		
			
