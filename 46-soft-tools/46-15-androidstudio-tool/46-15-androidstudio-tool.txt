0 资源
	0.1 androidstudio官网下载。
		https://developer.android.com/studio/archive 
		
		http://www.android-studio.org/
		
	0.2  http://tools.android-studio.org/ 
	0.3 Android Gradle 插件版本说明
		https://developer.android.google.cn/studio/releases/gradle-plugin 
		
		包含项：【各个 Android Gradle 插件版本所需的 Gradle 版本】
1. Android studio 将 Module 打包成 Jar 包,aar.
	1.1 Android studio 将 Module 打包成 Jar 包
		https://www.cnblogs.com/xinaixia/p/7660173.html
		
		1.1.1自定义生成 jar 包
			在 build.gradle 文件中加入如下代码： 方式一：
			在android节点外添加如下代码
			以WheelView为例。
			
			def _BASENAME = "WheelViewJar";
			def _VERSION = "_V1.3.4";
			def _DestinationPath = "build"; //生成jar包的位置
			//def zipFile = file('build/intermediates/bundles/default/classes.jar'); //待打包文件位置
			def zipFile = file('build/intermediates/packaged-classes/release/classes.jar'); //待打包文件位置,as3.5对应的目录，as版本不同可能会有所不同。根据实际情况添加即可。
			
			注意源jar不是这个目录下面的：build\intermediates\full_jar\debug\createFullJarDebug，编译出来的jar无法使用。其它项目导入该jar包时，无法解析BuildConfig.java
			
			task deleteBuild(type:Delete){
				delete _DestinationPath + _BASENAME + _VERSION + ".jar"
			}

			task makeJar(type:Jar){
				from zipTree(zipFile)
				from fileTree(dir:'src/main',includes:['assets/**']) //将assets目录打入jar包  
				baseName = _BASENAME + _VERSION
				destinationDir = file(_DestinationPath)
			}

			makeJar.dependsOn(deleteBuild, build)
	1.2 Android Studio 编译release的aar、jar包。【好用】
		https://blog.csdn.net/wenwins/article/details/80388361
		
		在 build.gradle 文件中加入如下代码： 方式一：
			在android节点外添加如下代码
			以WheelView为例。
		
		//自定义生成 jar 包
		//task to delete the old jar
		task deleteOldJar(type: Delete) {
			delete 'release/WheelViewJar_V1.3.4.jar'
		}
		//task to export contents as jar
		task makeJar(type: Copy) {
			delete 'release/WheelViewJar_V1.3.4.jar' //删除之前的旧jar包
			from('build/intermediates/packaged-classes/release/') //从这个目录下取出默认jar包
			into('release/') //将jar包输出到指定目录下
			include('classes.jar')
			rename('classes.jar', 'WheelViewJar_V1.3.4.jar') //自定义jar包的名字
		}
		makeJar.dependsOn(build)
		
		点击右边的Gradle侧边栏：makeJar ,或者exportJar
	1.3 ANDROID STUDIO 生成AAR和引用AAR 
		https://www.cnblogs.com/androidxiaoyang/p/5473916.html  
2. Android Studio：unsupported class file version 52.0报错
	2.1 Android Studio：unsupported class file version 52.0报错
		https://blog.csdn.net/u011435933/article/details/80923285?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase
3. 	ERROR: Jack is required to support java 8 language features. Either enable Jack or remove sourceCompatibility JavaVersion.VERSION_1_8.
	Affected Modules:
	
	https://blog.csdn.net/u011781521/article/details/52702482
	
		在build.gradle文件的defaultConfig中添加一下就可以了..

		jackOptions {
			enabled true
		}
		
		-source 1.7 中不支持 lambda 表达式
		
4. Android Studio的TODO，FIXME 
	4.1 Android Studio的TODO，FIXME 
		https://blog.csdn.net/kaoshibuguaa/article/details/51536992 
		
5. 添加签名文件。
	5.1 as3.5添加签名文件异常。
		老版本是不会报错的。
		
		Key was created with errors:

		Warning:
		JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore D:\juying\as1_5project\sp\AndroidJavaDemoTestForAS\sign\signature.jks -destkeystore D:\juying\as1_5project\sp\AndroidJavaDemoTestForAS\sign\signature.jks -deststoretype pkcs12" 迁移到行业标准格式 PKCS12。
		
		
		解决方法参考：
			Android APK签名 JKS 密钥库使用专用格式。建议使用 “keytool -importkeystore -srckeystore E:\xxxxxx- pkcs12“ 迁移到行业标准格式		
			https://blog.csdn.net/xkai007/article/details/106073091
			
			直接在androidstudio控制台中，输入：
			
				keytool -genkey -alias signature -keypass 123456 -keyalg RSA -keysize 2048 -validity 36500 -keystore D:\juying\as1_5project\sp\AndroidJavaDemoTestForAS\sign\signature.keystore  -storepass 123456
				回车后，需要继续按照提示输入相关信息，依次填写好信息后，输入 Y 确认信息即可。
			
			查看密钥详细输出信息：
				keytool -list -v -keystore D:\juying\as1_5project\sp\AndroidJavaDemoTestForAS\sign\signature.keystore 
		
6. Android Studio向项目添加C/C++原生代码教程 
	https://www.cnblogs.com/lsdb/p/9337285.html
	
7. 编译release or debug  apk失败。
	7.1 
		Caused by: com.android.builder.internal.aapt.v2.Aapt2Exception: AAPT2 error: check logs for details
		at com.android.builder.png.AaptProcess$NotifierProcessOutput.handleOutput(AaptProcess.java:443)
		at com.android.builder.png.AaptProcess$NotifierProcessOutput.err(AaptProcess.java:395)
		at com.android.builder.png.AaptProcess$ProcessOutputFacade.err(AaptProcess.java:312)
		at com.android.utils.GrabProcessOutput$1.run(GrabProcessOutput.java:104)
			
		解决过程参考：
		https://blog.csdn.net/zhouzhangfu/article/details/84789908
			构建 App 的时候，打开 Build 窗口，点击 “Toggle View” 切换到文本输出。
			在这种视图下，可以看清楚 gradle 的执行输出。如【7.2】错误详情。
	7.2
		mipmap-hdpi\katong01_200_300.png: error: failed to read PNG signature: file does not start with PNG signature.
	
		解决过程参考：
			https://blog.csdn.net/qiushisoftware/article/details/92763069		
			选中图片-右键-打开方式-画图，打开后另存为，选择png格式，删除项目中旧的logo并将最新的logo图片拷贝到项目中。

		重新打包，打包成功。
	7.3 使用或覆盖了已过时的 API。
		注: 某些输入文件使用了未经检查或不安全的操作。
		请使用 -Xlint:deprecation 重新编译。
		请使用 -Xlint:unchecked 重新编译。
	
	7.4 编译release成功
		编译debug失败
		AGPBI: {"kind":"error","text":"UNEXPECTED TOP-LEVEL ERROR:","sources":[{}]}
		AGPBI: {"kind":"error","text":"\tat com.android.dx.command.Main.main(Main.java:106)","sources":[{}]}
		:transformClassesWithDexForDebug FAILED
		
		参考博客：https://blog.csdn.net/qq_29984105/article/details/100514691
			最后删除掉
			C:\Users\***\.gradle\caches \ transforms-1

			才解决
8. android studio 编译处理的apk，在设备上运行后报：couldn't find "libxxxx.so"的错误解决办法
	https://blog.csdn.net/qq_41063141/article/details/86546113
	
	4.
		如果将so库文件其放在了libs下，则需要做如下配置：

		sourceSets { main { jniLibs.srcDirs = ['libs'] } }
9. android studio external tool 自定义工具
	9.1 javah
10 Android studio使用增量更新进行版本升级
	10.1 
		https://www.cnblogs.com/xiaoyang2009/p/5258380.html
	
		Current Version:3.4.2(build 183.6156.11.34.5692245)
		upgrade to 3.5.2(build 191.8026.42.35.5977832)

		windows 
		https://dl.google.com/android/studio/patches/AI-183.6156.11.34.5692245-191.8026.42.35.5977832-patch-win.jar	  
		（直接将这个地址复制了粘贴到浏览器就可以直接下载）
		
		下载完成后，将下载的.jar包放到Android studio的根目录，然后在命令行(Windows平台)或终端(linux，mac

		平台)执行下面命令进行安装：

		  java -classpath AI-183.6156.11.34.5692245-191.8026.42.35.5977832-patch-win.jar com.intellij.updater.Runner install .

		（记住最后面有个点，意思是将这个文件解压安装到当前目录）。
	10.2 
		Android Studio增量包升级方法
		https://blog.csdn.net/qq_28535319/article/details/99544768 
		
		参考这篇博客，解决问题了问题（3）。也正是博客中错误总结。
		
		下载后的安装包不要放在Android studio的安装目录，你可以随便放在一个文件夹，当然文件夹名英文不要有特殊字符，比如你放在了d盘update目录
		
		比如上面两个文件我都改了，因为为了可以增加as的运行速度，那有两个简单方法
		（1） 你以前改这两个文件的时候你备份了文件，你直接把改之前的文件替换改的文件（我就没备份）
		（2） 你把你版本的as再安装一次，在一个没用的文件夹中，然后把新安装目录中的文件复制过来替换
		（3）如果出现得错误列表中存在很多java jdk jre之类得不能更新，那应该是因为你选择的jdk jre目录是android studio内部文件路径得，这时你需要把jdk路径改成你自己环境变量配置中得，如果没配置（应该不会）那你需要去安装并配置，因为更新需要调用jdk工具，内置得会有冲突，不能自己更新自己
		ok了更新后，用起来真香。
11 NDK version is UNKNOWN
	cmake 工程同步失败，编译失败，配置了ndk,但提示未知
	NDK Resolution Outcome: Project settings: Gradle model version=4.4, NDK version is UNKNOWN
	
12 Android Studio 中的 CMake使用
	12.1 Android Studio 中的 CMakemessage打印日志以及输出位置
		https://blog.csdn.net/wq892373445/article/details/105013054 
		一、CMake 命令 message
			CMake 如果要像用户展示消息需要可以使用 message() API，类似与 Android 中的 Log 输出。

			message([<mode>] "message to display" ...)
			
			关键字，可以指定消息的类型：
			(none)         = 重要消息
			STATUS         = 附带消息
			WARNING        = CMake警告，继续处理
			AUTHOR_WARNING = CMake警告（dev），继续处理
			SEND_ERROR     = CMake错误，继续处理，但跳过生成
			FATAL_ERROR    = CMake错误，停止处理和生成
			DEPRECATION    = 如果分别启用了变量CMAKE_ERROR_DEPRECATED或CMAKE_WARN_DEPRECATED，则CMake弃用错误或警告，否则无消息
		二、点击as中右侧gradle，项目-module-Tasks-build-build执行即可。
		三、输出内容 CMake 会保存到文本中
			*\project\module-app\.cxx\cmake\debug\arm64-v8a\build_output.txt
	12.2 CMake was unable to find a build program corresponding to "Ninja"
		CMake Error: CMake was unable to find a build program corresponding to "Ninja".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
		
		https://blog.csdn.net/qq_15653601/article/details/88370856 
		博主方案：事实上是需要在环境变量中Path路径上添加上上图的cmake的bin目录，重启下AS或者IDEA（否则可能还是找不到），重新编译即可
		
		12.3.2 参考正常正常使用cmake的编译的工程MyJni
			gradle插件：gradle:3.5.2
			gradle版本：gradle:5.4.1 
			cmake:3.10
			androidstudio:3.5.2 
			
			将报错的工程采用MyJni一致版本配置。
			此时cmake编译日志可以正常打印了。【CMake was unable to find a build program corresponding to "Ninja"】错误不再提示。
13 Android Studio3.6设置Gradle Offline Mode的方法 
	android studio3.5以及之前的版本,设置方法：Settings-Build,Execution,Deployment.
	3.6 之后同样的位置已找不到Offline的设置选项了。
	View > Tool Windows > Gradle 
	
14 androidstudio 使用gradle构建失败
	14.1 下载https://maven.google.com/**/support-annotations-25.4.0.jar  
		提示Connection timed out。
		
		更改仓库：顶级gradle文件
		buildscript {
			repositories {
				jcenter()
				maven {
					url 'https://maven.google.com/'
					name 'Google'
				}
			}
		}

		allprojects {
			repositories {
					jcenter()
					maven {
						url 'https://maven.google.com/'
						name 'Google'
					}
			}
		}
		
		内容全部更换为：
			buildscript {
			repositories {
				google()
				jcenter()
				mavenCentral()

			}
		}

		allprojects {
			repositories {
				google()
				jcenter()
				maven { url 'https://jitpack.io' }
			}
		}
	14.2 指定名称生成apk.
		ERROR: Cannot set the value of read-only property 'outputFile' for ApkVariantOutputImpl_Decorated
		https://www.cnblogs.com/tangZH/p/10764568.html 
		转载请标明出处：https://www.cnblogs.com/tangZH/p/10764568.html
		
		Cannot set the value of read-only property 'outputFile' for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=debug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl.
		这个在低版本的gradle是行得通的，但是高版本就不行。
		
		buildTypes {
			release {
				minifyEnabled false
				proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
				outFileFormat(defaultConfig,"release")
			}
		}
		def releaseTime() {
			return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
		}
		def outFileFormat(defaultConfig, str) {
			// 自定义APK安装包名
			android.applicationVariants.all { variant ->
				variant.outputs.all { output ->
					def outputFile = output.outputFile
					if (outputFile != null && outputFile.name.endsWith('.apk')) {
						def path = "../" + str + "/";
						def fileName = "IbotnCamera2_${str}_V${defaultConfig.versionName}_${releaseTime()}.apk";
						outputFileName = new File(path, fileName)
					}
				}
			}
		}
15 Project needs to be converted to androidx.* dependencies 	
	
	15.1 Android解决Project needs to be converted to androidx.* dependencies问题
		https://blog.csdn.net/weixin_40420578/article/details/100582094 
		https://blog.csdn.net/mqdxiaoxiao/article/details/108264547
		
		方法一：把整个项目升级到AndroidX,可参考我的另外一篇博客：https://blog.csdn.net/weixin_40420578/article/details/100132061
	
		android.useAndroidX=true
		android.enableJetifier=true
		

16 使用Androidstudio编译AIDL

	16.1 使用Androidstudio编译AIDL时，出现Process 'command 'D:\SDK\build-tools\27.0.3\aidl.exe'' finished with non-zero exit value 1的错误； 
		https://blog.csdn.net/ezconn/article/details/87953991 
		有多种情况。
		我遇到的其中一个错误：aidl文件中导入其它aidl类的包名不正确
17 Android Studio中怎么使用DDMS工具
	17.1 Android Studio中怎么使用DDMS工具  
		as3.0以下的版本适用：
		https://www.cnblogs.com/zhichao123/p/11794491.html 
	17.AndroidStudio 3.0中之后无法打开DDMS [Android Device Monitor] 问题
		https://www.cnblogs.com/it-tsz/p/10810669.html 
		
		Dos命令
		其实在上面的批处理文件中真正打开DMMS的是最后一行命令，当然也可以把这行命令在命令窗口执行同样可以打开DDMS；

		（1）打开Window命令窗口 ：Win+R快捷键–>CMD–>Enter；复制命令： 
		call D:\*\AndroidSDK\tools\monitor.bat，然后回车执行，坐等1到3秒就会打开DDMS；

		（2）在AndroidStudio中底部Terminal中输入： 
		call D:\*\AndroidSDK\tools\monitor.bat，然后回车执行，坐等1到3秒就会打开DDMS；
	18 查看native进程。
	
18 androidstudio 安装apk到手机失败
	Installation did not succeed. The application could not be installed: INSTALL_FAILED_USER_RESTRICTED
	https://blog.csdn.net/qq_43598138/article/details/104091976 
19 avd
	19.1 android avd设置graphic automatic hardware software gles
	当设置为automatic启动模拟器失败。
20 android studio启动时默认加载的工程设置
	20.1 【Android Studio】修改默认打开上个项目的设置 
		https://www.jianshu.com/p/44288b0be8c3 
		
		Preference-> Appearance & Behavior -> System Settings 里面
21 内存设置
	21.1 RAM set:such as the core IDE or Gradle daemon
		File | Settings | Appearance & Behavior | System Settings | Memory Settings

22. Android studio导入eclipse项目
	22.1 Android studio导入eclipse项目（亲测）
		https://www.cnblogs.com/stars-one/p/7536284.html 
	22.2 Android Studio 导入 Eclipse 项目问题 
		https://blog.csdn.net/doris_d/article/details/79466926 
		
		a,目录结构问题
			Android Studio 项目的目录结构与 Eclipse 不一致，若想在导入项目后仍可在 Eclipse 中开发，则不能更改目录结构，那么只需要在 Module 的 build.gradle 的 android 领域中进行配置。
			sourceSets {
				main {
					java.srcDirs = ['src']
					res.srcDirs = ['res']
					assets.srcDirs = ['assets']
					jni.srcDirs = ['jni']
					jniLibs.srcDirs = ['libs']
					manifest.srcFile 'AndroidManifest.xml'
				}
			}
		b,编码问题,等多个问题记录。
23 androidstuido ndk-build 配置ndk只编译一种abi
		https://blog.csdn.net/leunging/article/details/111593353 
		
24 android studio 下ndk项目cpp自动补全,使用ndk-build编译Android.mk项目。
	24.1 AndroidStudio现有项目添加NDK支持（ndk-build编译） 
		https://niubashaoye.blog.csdn.net/article/details/81050052 
		
		项目添加C/C++引用到Grade中
		切换到Android视图，项目名右键->Link C++ Project with Gradle->选择ndk-build->然后选择Android.mk的项目路径； 
		
		b,配置还有问题
			androidstudio so,  More than one file was found with OS independent path 'lib/armeabi-v7a/xxx.so
			
			全部删除，重新编译即可。该方式编译成功后，直接打包apk,apk就自动包含so了。如果将*.so拷贝到(src/main/jniLibs)目录下，需要禁用编译jni编译。否则还会提示这个重复so错误。
			
		c,More than one file was found with OS independent path 'lib/armeabi/xxxx.so'解决方法
			在build.gradle(Module: app)里面，加上一句：
			packagingOptions {
				exclude 'lib/armeabi/xxx.so'
			}
			exclude后面跟的内容就填写你的错误的path里的内容即可，记得sync.
			如果exclude后path里面仍然是相同的值，可以尝试一下Build->Clean Project.
			
			该方式不可取。参考b就行。
		d,在ndkbuild完成后把生成的so文件复制到jniLibs
			https://blog.csdn.net/qwer492915298/article/details/88424922 
			
25 android studio 打包多个so库(Android.mk 和Application.mk)
	https://blog.csdn.net/qwer492915298/article/details/88424922 

 
26 Unable to execute Clang-Tidy.cCannot create propert=Diagnostcs for JavaBean=comjetorains.cdr.ang,.daemon.clang.tidy.ClangTidyYamlLoadersSYamlData@
	
	26.1 NDK issues with Studio 3.5.2 on Ubuntu
		https://stackoverflow.com/questions/59888112/ndk-issues-with-studio-3-5-2-on-ubuntu 
		
		a,This is a known issue. The clang-tidy integration in AS 3.5 is not compatible with NDK r21. It's fixed in 4.0. 
	26.2 unable to execute clang-tidy 
		https://blog.csdn.net/jacke121/article/details/114683665 