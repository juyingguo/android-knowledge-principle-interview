1.
	https://git-scm.com/downloads 
	
	1.2 github和gitlab的区别是什么
		https://m.php.cn/tool/git/471279.html
		-->区别：GitHub如果使用私有仓库，是需要付费的；而GitLab可以在上面搭建私人的免费仓库。
		-->GitLab:利用Ruby on Rail开发的开源应用程序，实现一个自托管的Git项目仓库，可以通过web界面进行访问公开的或者私人项目。
	1.3 GitLab：
		https://about.gitlab.com/

	1.4 GitHub:
		https://github.com/
	1.5 gitee
		帮助中心，学习git相关技术
		https://gitee.com/help#article-header0
2. 几款Git GUI客户端，服务器工具 
	2.0.0
		关于客户端需要具备以下重要特性
		a1:自动转换CRLF
		a2:合并冲突向导
	2.0.1
	https://www.cnblogs.com/ups216/p/5603199.html 
		https://www.zhihu.com/question/22932048?sort=created 
		
		{
			一、Git GUI 客户端 
				{GUI Clients 
					官网提供各种客户端介绍
				https://git-scm.com/downloads/guis/
				}
			二、Git IDE 插件
			三、Git 浏览器插件
			四、在线 Git 代码托管平台 
		}
		
	2.1 GitHub for Desktop
		
	2.2 Source Tree 
		https://www.sourcetreeapp.com/
		
		2.2.1 SourceTree安装与使用 
			https://www.cnblogs.com/fisherbook/p/11397168.html 
			
			SourceTree安装教程
			https://blog.csdn.net/qq_40238199/article/details/83068220 
			
			SourceTree的基本使用
			https://www.cnblogs.com/tian-xie/p/6264104.html 
	2.3 TortoiseGit 
		{有许多人性化的设计，比如说自动转换CRLF，Windows下选错换行符类型就提交是一场灾难；
		再比如说所有需要输入分支名或者commit的地方都能从相应的对话框当中选
		}
		{官网：https://tortoisegit.org/}
		{tortoisegit下载包及语言包
			https://tortoisegit.org/download/
			捐赠：
			https://tortoisegit.org/donate/
			
			https://tortoisegit.org/support/
		}
		{ Authentication
			ssh,or http/https
			查看程序中手册：2.1.5. Authentication
		}
		2.3.1 【TortoiseGit】TortoiseGit安装和配置详细说明
			https://blog.csdn.net/weixin_44299027/article/details/121178817
			秘钥配置
			PuTTY Key Generator
			配置SSH，与【3】中生成的有细微差别。
			
			#说明：使用TortoiseGit进行和远端输出项目时，Pageant必须启动且添加了对应的私钥。
		2.3.2{小乌龟(TortoiseGit)配置SSH
			https://blog.csdn.net/weixin_44480167/article/details/119178116
			https://blog.csdn.net/yjianlu/article/details/123541833
			
			a1:公钥配置服务上，私钥配置客户端上。
			a2:公钥配置在github时提示错误
				a2.1 Key is invalid. You must supply a key in OpenSSH public key format
					https://blog.csdn.net/u012643122/article/details/98951147
					配置内容如下：
					{
						ssh-rsa 公钥文件有效内容						
					}
					直接使用PuTTY Key Generator界面中添加好的格式；{
						ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAA.... rsa-key-20221227
						}
						即为：已经添加了开头ssh-rsa 公钥 
							结尾rsa-key-20221227就是注释（查看私钥文件可知）写不写都没关系。
					
				a2.2 https://blog.csdn.net/weixin_46566957/article/details/109319324
					{博主使用在linux上用xsel查看；查看结果带有ssh-rsa 加上内容。因此只需加上ssh-rsa即可}
		}
		2.3.3 初体验和发现：{在与git scm ,bash 共同使用的时候，会影响.gitignore文件的忽略配置。
				
				比如使用TortoiseGit clone项目。}
		2.3.4 依赖：
			gitforwindows
			see:[2.5]
			TortoiseGit require git.ext for its operations
	2.4 Git and gitgui
		https://git-scm.com/downloads 
		
		Git-scm windows下的安装步骤
			超详细Git 安装教程(Windows)[通俗易懂]
			https://cloud.tencent.com/developer/article/2099150
		
		Git Gui的使用 
		https://blog.csdn.net/wordwarwordwar/article/details/87281338 	
	2.5 https://gitforwindows.org/
		
	2.6 有哪些好用的git服务器

		链接：https://www.waimaiguai.com/technology/article/3592697
			https://blog.csdn.net/weixin_34799243/article/details/123933703?
	
		2.6.1 一款极易搭建的自助 Git 服务
			Gogs
			
			服务端搭建Git很简单，有更多需求不妨试试Gogs和Gitlab
			
			使用Gogs轻松搭建可能比GitLab更好用的Git服务平台；
				https://wsgzao.github.io/post/gogs/
				
				https://blog.csdn.net/yyz_1987/article/details/87169052
				
				扩展阅读
					Gogs - https://gogs.io/
					GitLab - https://about.gitlab.com/
					Bitnami GitLab Stack - https://bitnami.com/stack/gitlab
			
			【git私有服务器-gogs搭建】		
			https://blog.csdn.net/weixin_34799243/article/details/123933703?
3. git（Gui的使用、Ssh key 介绍及使用、Idea配置使用并使用git）
	https://blog.csdn.net/weixin_45174537/article/details/102941957 
	
	第一步：本地电脑配置
	   右键空白处，选择Git Bash Here打开相关命令窗口   
	   1.配置用户名和邮箱（如果已经配置，就跳过）
		 
		 git config --global user.name "username"
		 git config --global user.email "email"
		 之后就会在C:\Users\Administrator下创建一个.gitconfig文件，内容为
		 [user]
		 name = xxx
		 email = xxx@xxx.com
		 
		 注1：username和email即github的登陆帐号和注册邮箱
		 注2：git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置		
		 
	   2.检查下自己之前有没有已经生成ssh
		 cd ~/.ssh
		 ls

		 注1：当cd ~/.ssh命令执行后窗口返回“no such file or directory”的时候，表示我们的电脑并没有ssh key，所以需要我们创建ssh key
		 注2：~表示当前用户的目录，比如我的是：C:\Users\Administrator
		 注3：ls命令执行后，如果本地有ssh秘钥的话会有id_rsa.pub，config，known_hosts等文件

	   3.生成(或删除)秘钥
		 ssh-keygen -t rsa -C "xxx@xx.com"//这里的邮箱要换成自己注册时的邮箱
		 接着按3个回车即可。
	  
		 注1：如果本地有ssh，执行以上命令会出现正面的提示，这里选择y，表示覆盖本地的ssh key，其实也就是ssh秘钥删除的意思
		 注2：为什么要删除秘钥，创建SSH的时候设置过密码，那就很有可能git操作时出现忘记密码的尴尬情况，
			  不要想着怎么重新修改密码了，选择重新创建一个ssh秘钥  
		 注3：创建ssh key不要输入密码了，不然操作起来太累~~~~~~~ 
	 
	   4.执行命令完成后,默认会在window的C:\Users\Administrator\.ssh下面生成如下两个名称的文件: 
		 C:\Users\Administrator\.ssh
		   id_rsa(私钥，不能泄露出去)
		   id_rsa.pub(公钥)
		   known_hosts(不用管) 
	第二步：远程github仓库配置
	 
		 gitbub,点击右上角的倒立小三角形。选择 settings
		   2.选择SSH and GPG keys
		   3.点击右边的New SSH key
		   4.随意填入一个title，然后 key 中粘贴刚才复制的id_rsa.pub文本，点击 Add key 这样就大功告成
		   5.github官网有时候会要你输入登陆密码才能添加ssh key。输入密码即可
	 第三步：修改你本地的ssh remote url. 不用https协议，改用git 协议
		   1.git remote -v 查看你当前的remote url
		 git remote -v
		 
		 ## 如何显示如下内容，则表示Git仓库是使用https协议进行访问的。
		 origin  https://github.com/lixiao12/test224.git (fetch)
		 origin  https://github.com/lixiao12/test224.git (push)

		   2.使用浏览器登陆github，找到仓库ssh协议相应的url。类似如下：
			 git@github.com:lixiao12/test224.git

		   3.使用 git remote set-url 来调整你的url。
			 git remote set-url origin git@github.com:lixiao12/test224.git

		   4.最后再用 git remote -v 查看一下。协议已改变
	第四步：测试SSH连接 
			ssh -T git@github.com
		
		 ssh -T git@github.com
			git@github.com: Permission denied (publickey).
			
			使用命令重新生成的会有该问题。使用原有根据电脑好生成的，在github 配置，就正常了。
	
	3.5 2022.05
		连接异常
		ssh: connect to host github.com port 22: Connection refused
		fatal: Could not read from remote repository.
		3.5.1 
			解决ssh: connect to host github.com port 22: Connection refused
			https://blog.csdn.net/qq_34258344/article/details/124674209
			[验证无效] 
				会继续报433错误
	3.6 参考【4.3解决】
4. github.io无法访问问题及解决
	4.1 解决GitHub.io无法访问的问题 
		https://blog.csdn.net/weixin_45085810/article/details/108339662
		
		解决途径：修改本地hosts文件（位置：C:/windows/system32/drivers/etc/hosts）
	4.2  解决github无法访问的问题，亲测有效。
		https://www.jianshu.com/p/36320f35b5b5 
		
		在不考虑google浏览器插件vpn能上网的情况下使用。因为此时虽然使用chrome浏览器能够访问github，但是本地git客户端依然无法访问。通过配置host也可以很好的解决。
		
		在C:\Windows\System32\drivers\etc中打开host文件（可以用UE等编辑工具打开），在该文件中添加如下内容。

		# GitHub Start 
		140.82.114.4 github.com
		140.82.114.4 gist.github.com
		185.199.108.153 assets-cdn.github.com
		151.101.64.133 raw.githubusercontent.com
		151.101.108.133 gist.githubusercontent.com
		151.101.108.133 cloud.githubusercontent.com
		151.101.108.133 camo.githubusercontent.com
		151.101.108.133 avatars0.githubusercontent.com
		151.101.108.133 avatars1.githubusercontent.com
		151.101.108.133 avatars2.githubusercontent.com
		151.101.108.133 avatars3.githubusercontent.com
		151.101.108.133 avatars4.githubusercontent.com
		151.101.108.133 avatars5.githubusercontent.com
		151.101.108.133 avatars6.githubusercontent.com
		151.101.108.133 avatars7.githubusercontent.com
		151.101.108.133 avatars8.githubusercontent.com 
		# GitHub End

		作者：吴尼玛cs
		链接：https://www.jianshu.com/p/36320f35b5b5
		来源：简书
		著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
		
	4.3 修改本地hosts文件（位置：C:/windows/system32/drivers/etc/hosts）
		199.232.69.194   global-ssl.fastly.Net

		140.82.112.3      github.com
		
		实验现象：不能用时再配置或不配置，相互切换。
		
	4.4 
		更换协议https to ssh试试。
		
		初步验证：ok
5  fotiaoqiang vpn
	https://github.com/getfotiaoqiang/fotiaoqiang	
		
	推荐一款免费又稳定的梯子，速度超快，看油管，刷twitter用Google非常顺畅，现在搞限时活动免费领取VIP会员，填写兑换码gnaw3o6e，可立即获得VIP会员，下载链接：http://wckoqd.xzzccd.com/88gnaw3o6e2/
	填写兑换码gnaw3o6e，可立即获得VIP会员
6. 设置代理解决github被墙
	https://zhuanlan.zhihu.com/p/481574024 
7. Git Gitee
	https://www.runoob.com/git/git-gitee.html
8. tortoisegit
	https://tortoisegit.org/download/
	
	功能很全，基本上命令行里有的功能在GUI上都有对应，而且设计的位置很合理。
	有许多人性化的设计，比如说自动转换CRLF，Windows下选错换行符类型就提交是一场灾难；。
	再比如说所有需要输入分支名或者commit的地方都能从相应的对话框当中选。
	查看和编辑conflict很方便，不会把带着>>> <<<的文件就那么提交上去了。
*****
0.资源
	0.1 官网
		https://git-scm.com/download/win 
	
1. git教程
	1.1 廖雪峰的git教程
		https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496
	1.2 图形化介绍GIT的网站：https://learngitbranching.js.org/?demo=&locale=zh_CN
	
	1.3 https://www.runoob.com/git/git-tutorial.html
	1.4 git教程
		https://www.php.cn/tool/git/
2.  ! [rejected]        master     -> master  (non-fast-forward)
	 git push origin master : master //错误，":" 两边不能有空格。否则引发该错误。
	 
3. git合并时冲突
	3.1 git合并时冲突<<<<<<< HEAD
		https://www.cnblogs.com/ziye/p/11175988.html
		
		<<<<<<< HEAD
		本地代码
		=======
		拉下来的代码
		>>>>>>>
	3.2 git 本地代码没有修改 却有很多合并冲突
		Git工作流问题-大量未更改文件的合并冲突
		https://www.5axxw.com/questions/content/yd30lq
	
4. GitHub加速
	4.1 Chrome 应用商店，安装插件。
		仓库处会显示加速地址
	4.2 GitHub加速及重新关联远端地址
		https://blog.csdn.net/wangshuaiwsws95/article/details/104730741
			博主使用的是码云。
			这时候克隆到本地的项目关联的是码云Gitee的地址，已经和原来的GitHub项目完全脱离了，是另外一个副本。需要重新关联。
		重新关联远端地址
		用文本编辑器打开.git文件夹中的config配置文件
		[remote "origin"].url字段重新关联到原来位于GitHub上的GitHub项目地址
	4.3 提高国内访问Github速度 
		https://blog.csdn.net/codinglover5/article/details/107826097
		1. GitHub 镜像访问
		这里提供两个最常用的镜像地址：

		https://github.com.cnpmjs.org

		https://hub.fastgit.org
		也就是说上面的镜像就是一个克隆版的Github，你可以访问上面的镜像网站，网站的内容跟Github是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。
		2.
		3.
		...
		博文中有8种方式可以参考
		
	4.4 git pull 拉去代码很慢解决方法
		参考【4.1】【4.2】更改配置文件config中的url。拉去完成后再把url更改回去。保证提交时是自己的原始仓库地址哦。
	
5. 在原有仓库主分支上创建分支后提交到github服务器上。
	
	Administrator@USER-20190225WN MINGW64 /d/juying/workspace/hbuilder-workspace/games (debug_add_log_and_feature)
	$ git push origin debug_add_log_and_feature:debug_add_log_and_feature #执行的新分支提交命令。
	
	Username for 'https://github.com': juyingguo
	Total 0 (delta 0), reused 0 (delta 0)
	remote:
	remote: Create a pull request for 'debug_add_log_and_feature' on GitHub by visiting:
	remote:      https://github.com/juyingguo/games/pull/new/debug_add_log_and_feature
	remote:
	To https://github.com/juyingguo/games.git
	 * [new branch]      debug_add_log_and_feature -> debug_add_log_and_feature

	分析：
	提交非常快，1s中就完成了，好像并没有提交该分支代码到服务器，服务器端也创建分支成功了。
	原理是什么？待分析。
	
6. 【Git】如何更新或取消GitHub上fork的Repository
	https://blog.csdn.net/hongwei15732623364/article/details/80148376 
	
	6.2 github上fork了别人的项目后，再同步更新别人的提交
		https://blog.csdn.net/qq1332479771/article/details/56087333 
	 
7. git中tag与release的创建以及两者的区别
	7.1 https://www.jianshu.com/p/79ecf4fe5079 
		创建lightweight类型的tag：

		$ git tag v1.4-lw
		创建annotated类型的tag：

		$ git tag -a v1.4 -m "my version 1.4"
		
		$ git push origin v1.4 //提交
	7.2 创建 Releases 
		https://www.jianshu.com/p/b6e7c6b851ae 

	7.3 git checkout tag 提示信息
		git checkout v3
		Note: switching to 'v3'.

		You are in 'detached HEAD' state. You can look around, make experimental
		changes and commit them, and you can discard any commits you make in this
		state without impacting any branches by switching back to a branch.

		If you want to create a new branch to retain commits you create, you may
		do so (now or later) by using -c with the switch command. Example:

		  git switch -c <new-branch-name>

		Or undo this operation with:

		  git switch -

		Turn off this advice by setting config variable advice.detachedHead to false

		HEAD is now at 371c79c OK, can run

		
	7.4 git基于某个Tag修改提交
		https://blog.csdn.net/adojayfan/article/details/88808731 
		https://www.cnblogs.com/steven158/p/15118011.html#_label0_1 
		git tag版本代码快速修复
		https://blog.csdn.net/zixiao217/article/details/73655633? 
		[可以部分参考]
		
		如果要在某个tag的基础上做修改，直接切换到tab，修改后是无法提交的。

		因为这时HEAD指向了一个具体的commit id，而没有处在一个分支中。
		
		先根据这个tag新建一个分支
		git checkout -b 新分支 tag名

		$ git checkout -b newbranch tag1.1
			或者使用 git switch -c newbranch v3 //-c --create;
		1
		然后在这个新分支上修改后，提交代码
	7.5 git tag和分支的区别_一文讲透 Git 底层数据结构和原理
		https://blog.csdn.net/weixin_39777019/article/details/110660950 
		
8. 工具系列 | git checkout 可替换命令 git switch 和 git restore
	https://blog.csdn.net/qq756684177/article/details/104454371 
9. 仓库中包含子仓库。
	异常提示：
	username@mypc MINGW64 /i/juying/android/android-source/android-5.1.1_r1/packages (master)
	$ git add .
	warning: adding embedded git repository: apps/BasicSmsReceiver
	hint: You've added another git repository inside your current repository.
	hint: Clones of the outer repository will not contain the contents of
	hint: the embedded repository and will not know how to obtain it.
	hint: If you meant to add a submodule, use:
	hint:
	hint:   git submodule add <url> apps/BasicSmsReceiver
	hint:
	hint: If you added this path by mistake, you can remove it from the
	hint: index with:
	hint:
	hint:   git rm --cached apps/BasicSmsReceiver
	hint:
	hint: See "git help submodule" for more information.
	warning: adding embedded git repository: apps/Bluetooth
	warning: adding embedded git repository: apps/Browser

10. git 配置全局和局部邮箱和用户名
	10.1 用户信息
		a,配置个人的用户名称和电子邮件地址：

			$ git config --global user.name "runoob"
			$ git config --global user.email test@runoob.com
			如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。

			如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。
		b，全局配置文件如：
			C:\Users\Administrator\.gitconfig
			
		 #此时配置的用户名和邮箱，会作为提交身份信息的一部分。并不同于注册的账号、用户名、邮箱，当然也可以相同。
			
11 clone 仓库报错
	解决github unable to access 'https://github.com/...: Failed to connect to github.com port 443.
	https://blog.csdn.net/a_dreaming_fish/article/details/50474363
	
	经过查阅资料，这是由于没有指定用户密码导致的问题，在这种情况下，我们可以修改下载的仓库的URL地址，
	格式就是https://username:passwords@github.com/username/repository.git
	
	$ git push origin master 报错
		[协议为：https]
		问题提取：【关于Support for password authentication was removed on August 13, 2021报错的解决方案 - 知乎
					https://zhuanlan.zhihu.com/p/414028184
				   】			
		【描述】
		remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
		remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.
		fatal: Authentication failed for 'https://github.com/juyingguo/OA.git/'
		[处理方法：使用token方式访问https的github]
		
		{
			生成token后，记得把你的token保存下来，以便进行后面的操作。把token直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入token了。

			git remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git
			<your_token>：换成你自己得到的token
			<USERNAME>：是你自己github的用户名
			<REPO>：是你的仓库名称
			下面是一个实例：
			git remote set-url origin https://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@github.com/shliang0603/Yolov4_DeepSocial.git/
		}
		
	git pull origin master
	fatal: unable to access 'https://github.com/juyingguo/OA.git/': OpenSSL SSL_read: Connection was reset, errno 10054
		{同时参考4，配置github 主机地址。如果不能访问切换使用和关闭后}
12 TLS certificate 警告
	git pull 操作http仓库时。
	warning: ----------------- SECURITY WARNING ----------------
	warning: | TLS certificate verification has been disabled! |
	warning: ---------------------------------------------------
	warning: HTTPS connections may not be secure. See https://aka.ms/gcmcore-tlsverify for more information.
13.Git出现“file name too long”错误处理
	https://blog.csdn.net/weixin_38304160/article/details/125371820
	
	git config --system core.longpaths true
	