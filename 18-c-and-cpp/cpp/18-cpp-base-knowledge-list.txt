0，资源
	0.1 c++函数库查看网址
		C++有cplusplus.com和cppreference.com这两个标准参考网站。
		也可以查看c标准函数库
	0.2 cpp教程
		https://www.runoob.com/cplusplus/cpp-tutorial.html 
		
		0.2.2 C++日记
			【博主系列日记】转到【21】
			https://blog.csdn.net/weixin_38278993/article/details/104459267 
	0.3 c运行库、c标准库、windows API的区别和联系 
		https://www.cnblogs.com/renyuan/p/5031100.html 
	0.4 windows 下cpp文档
		https://blog.csdn.net/weixin_43919932/article/details/111397938 
		https://docs.microsoft.com/en-us/windows/win32/api/
	
01 C++11/C++14新特性
	01.1 C++11/C++14新特性
		https://blog.csdn.net/aaron19890330/article/details/82898306
02. C++ 有用的网站
	C++ Programming Language Tutorials ? C++ 编程语言教程。
	C++ Programming ? 这本书涵盖了 C++ 语言编程、软件交互设计、C++ 语言的现实生活应用。
	C++ FAQ ? C++ 常见问题
	Free Country ? Free Country 提供了免费的 C++ 源代码和 C++ 库，这些源代码和库涵盖了压缩、存档、游戏编程、标准模板库和 GUI 编程等 2. C++ 编程领域。
	C and C++ Users Group ? C 和 C++ 的用户团体提供了免费的涵盖各种编程领域 C++ 项目的源代码，包括 AI、动画、编译器、数据库、调试、加密、游戏、图形、GUI、语言工具、系统编程等。
03 C++ 有用的书籍
	3.1 Essential C++ 中文版
	3.2 C++ Primer Plus 第6版中文版
		C++ Primer中文版（第5版）
		
		C++ Primer书籍源码  
		https://www.haolizi.net/example/view_56764.html  		
		http://www.informit.com/title/0321714113 
	3.3 Exceptional C++》《Exceptional C++ 中文版》
	3.4 
	3.5 《c++程序设计第2版 谭浩强》 
		配套教材：《c++程序设计题解和上机指导第2版》
		包含《c++程序设计第2版 谭浩强》书中的例子及习题解答
		c++程序设计第2版 谭浩强 例子源码
	3.6 《Effective C++》
	3.7 《C++ Weekly -Ep 107》
04 c++ tcp文件传输例子
	4.1 c++ tcp文件传输例子源码下载(含服务器端和客户端完整源码)
		
		https://www.haolizi.net/example/view_3422.html 
	
	4.2 QT5 服务器和客户端之间进行文件传输
		https://blog.csdn.net/weixin_44565518/article/details/103291274 
		
	4.3 QT 实现FTP客户端
		https://blog.csdn.net/Sakuya__/article/details/86682181?
		
		https://github.com/sakuya0818/FTP
	4.4 使用c++实现一个FTP客户端(一) 
		https://blog.csdn.net/p312011150/article/details/78729576  
		
		https://www.cnblogs.com/jzincnblogs/p/5213978.html 
		二
		https://blog.csdn.net/p312011150/article/details/78729581?
		http://www.cnblogs.com/jzincnblogs/p/5213978.html 
		三
		https://blog.csdn.net/p312011150/article/details/78729583? 
		https://www.cnblogs.com/jzincnblogs/p/5227747.html 
	4.5 ftpclient and ftpserver
		filezilla是一款高性能ftp工具
		https://github.com/helloworldgnu/filezilla
			https://filezilla-project.org/
		
		https://github.com/Wenchy/tinyFTP
			Implementation of a tiny FTP client and server
		
		client::
		https://github.com/embeddedmz/ftpclient-cpp 
		
		https://github.com/CCCaoke/FTPClient
		
一、C++中：：的作用 
	
	1.1、https://blog.csdn.net/better_xiaoxuan/article/details/52957219
	
	1.2、c++中冒号（:）和双冒号（::）的用法 
		https://blog.csdn.net/zimingjushi/article/details/6549390
		
二、C++ struct也可以继承（转载的） 
	
	2.1、C++ struct也可以继承（转载的） 
		https://blog.csdn.net/luccao/article/details/84025777
		
三、C/C++中const关键字详解 
	
	3.1、C/C++中const关键字详解
		https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777416.html 
		
	3.2、C++ const修饰函数、函数参数、函数返回值 
		【破船不会沉】【c,c++,算法，数据结构】
		https://blog.csdn.net/my_mao/article/details/22872149
		
		c++在函数后加const的意义： 
		https://blog.csdn.net/oykotxuyang/article/details/106142465 
		
		1、非静态成员函数后面加const（加到非成员函数或静态成员后面会产生编译错误）

		2、表示成员函数隐含传入的this指针为const指针，决定了在该成员函数中， 任意修改它所在的类的成员的操作都是不允许的（因为隐含了对this指针的const引用）；

		3、唯一的例外是对于mutable修饰的成员。加了const的成员函数可以被非const对象和const对象调用，但不加const的成员函数只能被非const对象调用
	3.3 C++中const关键字的使用总结 
		https://www.cnblogs.com/gklovexixi/p/5619647.html
		
	3.4 const_cast 作用及用法。
	
	3.5 C++函数前和函数后加const修饰符区别 
		在函数前加 const 访问函数时报错。
		调试：：*\cpp_project\02_cpp_base_knowledge\011_03_const_function_and_return_test.cpp
		error: cannot convert 'FunctionConst::getValue' from type 'const int (FunctionConst::)()' to type 'const int'|
		FunctionConst::getValue 没有加();
		
	  
		
四、C++中的静态绑定和动态绑定 
	4.1、C++中的静态绑定和动态绑定 
		https://www.cnblogs.com/lizhenghn/p/3657717.html
		
	4.2、 深入理解C++的动态绑定和静态绑定 
		https://blog.csdn.net/chgaowei/article/details/6427731
5. cpp泛型,template
	5.1 cpp泛型中的类型后跟*
	
	5.2. C++泛型基础 
		https://blog.csdn.net/github_34965845/article/details/80540013
		
	5.3 template 定义泛型类。
		该类中的模板函数所使用的泛型类型名称可以不同。没关系的。
		函数模板生命中的泛型名称与定义时所使用的的泛型名称必须一致。 
		
	5.4 android 源码强指针sp使用双模板定义拷贝构造函数。
		
	5.5 c++模板类构造函数怎麽写
		https://www.csdn.net/gather_2c/NtDagg4sMjgtYmxvZwO0O0OO0O0O.html

6. typedef vs #define
	6.1  typedef vs #define
		https://www.runoob.com/cprogramming/c-typedef.html
		
		#define 是 C 指令，用于为各种数据类型定义别名，与 typedef 类似，但是它们有以下几点不同：

		typedef 仅限于为类型定义符号名称，#define 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。
		typedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。
	6.2 C/C++ typedef用法详解（真的很详细）
		https://www.cnblogs.com/wen-ge/articles/5807509.html 
7. inline

8. cast
	8.1 static_cast
		C/C++： C++ 中 static_cast 类型转换的含义 
		https://blog.csdn.net/zangle260/article/details/26740269 
		https://blog.csdn.net/moruihong/article/details/7712260
		
		C++-类型转换(static_cast, const_cast, reinterpret_cast)
		https://www.cnblogs.com/hyq-lst/p/12603716.html
	8.2 c++-const_cast 使用
		https://blog.csdn.net/qq_30968657/article/details/53886737 

		*\cpp_project\02_cpp_base_knowledge\033_cast_02_const_cast_02.cpp
		
		如果我们不想修改const变量的值，那我们又为什么要去const呢？		原因是，我们可能调用了一个参数不是const的函数，而我们要传进去的实际参数确实const的，但是我们知道这个函数是不会对参数做修改的。于是我们就需要使用const_cast去除const限定，以便函数能够接受这个实际参数。
		应该遵从这样的原则：使用const_cast去除const限定的目的绝对不是为了修改它的内容，只是出于无奈
9、cpp	[Error] 'numeric_limits' was not declared in this scope
	1.1、cpp	[Error] 'numeric_limits' was not declared in this scope
		https://stackoverflow.com/questions/20231259/error-numeric-limits-was-not-declared-in-this-scope
		
10、c++ 中三种继承方式。
	2.1、c++ 中三种继承方式。
		https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html 
		
		如果继承时不显示声明是 private，protected，public 继承，则默认是 private 继承，在 struct 中默认 public 继承：
		
11. 初始化局部变量和全局变量 
	3.1、初始化局部变量和全局变量 
		https://www.runoob.com/cplusplus/cpp-variable-scope.html
		
		
		当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动初始化为下列值：

		数据类型	初始化默认值
		int			0
		char		'\0'
		float		0
		double		0
		pointer		NULL
		正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果。
12、C++ inline 函数简介 
	4.1、C++ inline 函数简介 
		博主：：著述《c++进阶心法》
		https://blog.csdn.net/K346K346/article/details/52065524?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
		
13. C++ struct
	5.1 C++struct里定义函数 
		https://blog.csdn.net/ucasliyang/article/details/52691619?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
		
		c++中允许在结构体当中定义函数，它的用法和类的用法很像，不过与类有一个区别在于，struct中定义的函数和变量都是默认为public的，但class中的则是默认为private。
14. 虚函数virtual
	6.1 析构函数加上虚函数声明，因为需要删除，删除是可能通过基类进行删除。
		而构造函数是不需要加虚函数声明的，因为构造函数是直接调用的。
		
		6.1.1 C++将析构函数定义成virtual的真正原因
			https://blog.csdn.net/jacqueslim/article/details/6792105 
			
			题目中的A* d = new B();(假定A是基类，B是从A继承而来的派生类)，那么其(A类)析构函数必须是虚的，否则在delete d时，B类的析构函数将不会被调用，因而会产生内存泄漏和异常；
15. C/C++中指针
	15.1 C/C++中指针变量占用几个字节
		https://blog.csdn.net/onlyTbabm/article/details/80770961 
		
		32位系统，指针长度为4，在64位操作系统下那么就都是8
	15.2 c++中的类的对象与类的指针
			https://www.cnblogs.com/yinheyi/p/5980372.html 
			a,在应用时:   
			a1.引用成员:   对象用"   .   "操作符;   指针用"   ->   "操作符.   
			a2.生命期:     若是成员变量,则是类的析构函数来释放空间;若是函数中的临时变量,则作用域是该函数体内.而指针,则需利用delete 	在相应的地方释放分配的内存块.      注意:用new   ,一定要delete.. 
			类的对象:用的是内存栈,是个局部的临时变量.   
			类的指针:用的是内存堆,是个永久变量,除非你释放它.
		15.2.1 
	15.3 cpp中智能指针
		15.3.1 project:
			cpp_projects_weids\cpp_projects\20th_light_smartpointer\*
			也存在弊端：两个对象，相互引用时，无法删除销毁。
		15.3.2 GCC 提供的原子操作-__sync_fetch_and_add系列
			https://blog.csdn.net/qq_14898543/article/details/49888831 
		15.3.3
			cpp_project\cpp_projects_weids\cpp_projects\21th_strongpointer_weakpointer\01th\person9.cpp
			虽然使用sp。但关闭其中son->setFather(father);最后两个Person都被销毁了。为何呢？son.person count=2，-1后为1。
			b,分析：是使用了android的文件。是这样的。
			c,使用我们自己实现的强指针。结果是什么呢？
				cpp_projects\19th_smartpointer\person9_father_son_ref_eachother.cpp
				c2,发现还是没有调用sp(const sp &other)。
				c3,分析是没有重载=。
				c4,重载后，验证，和安卓的一样。
				
			
		15.3.4 strongpointer_weakpointer 
			a,老师深入分析：构造和析构完整顺序，引用计数完整分析。
			b,\cpp_projects_weids\cpp_projects\21th_strongpointer_weakpointer\01th\person9.cpp 
	15.4 采用指针类型引用的好处是什么？
		始终包含四个字节。如果不使用指针，如果类中发生成员变化，所有引用该类的cpp文件都要重新编译一遍。而是用指针就不用重新编译。
		举例：
		\android\system\core\include\utils\RefBase.h
		weakref_impl* const mRefs;
	15.5 c/cpp函数指针
		https://blog.csdn.net/qq754772661/article/details/106996329/ 
16 C++ new和数组
	https://blog.csdn.net/u010292561/article/details/77877266? 
	
17 namespaces 
	不要放到头文件中，会不可控的。要放到cpp文件中，因为代码自己都知道。
18 thread
	18.1 detach 
		http://cplusplus.com/reference/thread/thread/detach/
		
		C/C++中分离（detach）线程的陷阱
			https://blog.csdn.net/tissar/article/details/86255018 
	18.2 带线程的cpp文件编译的时候，添加-lpthread
		因为不添加提示：undefined reference to 'pthread create'
		如：g++ -o out threa_test.cpp -lpthread
19 c++引用
	19.1 c++中临时变量不能作为非const的引用参数
		https://blog.csdn.net/kongying168/article/details/3864756 
		
		问题启发于【cpp_projects_weids\cpp_projects\19th_smartpointer\person4.cpp】
20 构造函数和析构函数
	
	20.1 C++构造函数和析构函数的调用顺序
		a,验证工程也可以参考：cpp_projects\19th_smartpointer\person9_father_son_ref_eachother.cpp
			通过注释不同执行的代码。更加深刻分析执行顺序。
		b,https://www.cnblogs.com/lidabo/p/9328323.html

		a
		1、构造函数的调用顺序 
		基类构造函数、对象成员构造函数、派生类本身的构造函数  

		2、析构函数的调用顺序
		派生类本身的析构函数、对象成员析构函数、基类析构函数（与构造顺序正好相反） 

		3、特例 
		局部对象，在退出程序块时析构

		静态对象，在定义所在文件结束时析构

		全局对象，在程序结束时析构 

		继承对象，先析构派生类，再析构父类 

		对象成员，先析构类对象，再析构对象成员
	20.2 C++中的默认函数与default和delete用法
		https://blog.csdn.net/u012333003/article/details/25299939? 
		
		test:02_cpp_base_knowledge\014_constructor_03_with_delete_test.cpp
		
		b,C++中 =defaule 和 =delete 使用
			https://blog.csdn.net/lmb1612977696/article/details/80035487? 
		c，C++11中=delete的巧妙用法
			https://blog.csdn.net/whahu1989/article/details/90648536? 
			
21 C++日记
	【博主系列日记】
	21.1 C++日记——Day10：类内初始化、默认构造函数、=default、=delete、拷贝构造函数
		https://blog.csdn.net/weixin_38278993/article/details/104459267 