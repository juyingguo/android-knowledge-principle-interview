00,,资源
	00.1 
	00.2 2020 年需要关注的 5 大 Android 开发技术
		https://baijiahao.baidu.com/s?id=1655064289027071426&wfr=spider&for=pc 
零一、Android API与Android版本的关系 
	0.1、 Android API与Android版本的关系  
		https://blog.csdn.net/T_Tzz/article/details/90348873 
		
		https://www.jianshu.com/p/27711d61f221
	0.2 Android 系统与SDK和JDK版本对照表
		https://blog.csdn.net/qq_40147863/article/details/83241005? 
		
02、用命令行执行Java程序
	02.1 [不带包名时] 用命令行执行Java程序 
		https://blog.csdn.net/qq_42109746/article/details/88769357
		
		3.在命令行下输入 javac +源程序名，此时会在该目录下生成.class编译文件

		4.在命令行下输入 java +源程序类名，开始运行
	02.2 [带包名时] 用命令行执行Java程序 
		https://blog.csdn.net/weixin_30823227/article/details/97678175
		
		Test.java //在D:/javaproject/目录下。
		package com.algorithm.sorttest;

		public class Test {

			public static void main(String[] args) {
				System.out.println("******** hello wolrd.");
			}
		}
		D:/javaproject>javac -d . Test.java //执行后会生成Test.clas位于 D:/javaproject/com/algorithm/sorttest/Test.class
		
		D:/javaproject>java com.algorithm.sorttest.Test 
		
		或者将Test.java 放到 D:/javaproject/com/algorithm/sorttest/Test.java
		D:/javaproject>javac  com.algorithm.sorttest.Test.java
		D:/javaproject>java com.algorithm.sorttest.Test
03 最全的Android源码目录结构详解
	https://www.cnblogs.com/zhangkeyu/p/6647467.html 

04 日志规则技巧
	04.1 TAG 标签中添加应用的包名，便于在整个系统中定位却别。
05 Android SDK PDK NDK详解 
	05.1 Android SDK PDK NDK详解 
		https://blog.csdn.net/ztguang/article/details/52850712
		这个三个词应该是在软件开发领域通用的，它们的全称分别为SDK(Software Development Kit),PDK(Platform Development Kit),NDK(Native Development Kit)
	
一、static关键字
	1.1、static关键字 作用？
	1.2、类，变量，方法，代码块，使用static修饰后，执行顺序？
		Java中的static变量、方法、代码块初始化执行顺序
		https://www.cnblogs.com/DreamDrive/archive/2011/11/15/3917139.html
		
	1.3、JAVA中静态方法和非静态方法的区别 
		https://blog.csdn.net/don_mingo/article/details/87918386 
		
		1.3.2、 https://blog.csdn.net/mayzilee/article/details/51434896
		
	1.4、一个类，含有一个static变量，这个类是否常驻虚拟机？
		
二、近似值，四舍五入，面试题？
	2.1、自己手动强制float转化为int，结果为多少？
		验证结果：只取整数部分。
	2.2、使用 Math.round(d)
		round() 方法返回一个最接近的 int、long 型值，四舍五入。
		round 表示"四舍五入"，算法为Math.floor(x+0.5) ，即将原来的数字加上 0.5 后再向下取整，所以 Math.round(11.5) 的结果为 12，Math.round(-11.5) 的结果为 -11。
		
		
		testRound，d=100.675,n=101
		testRound，d=100.5,n=101
		testRound，d=100.0,n=100
		testRound，d=90.0,n=90
		testRound，d=90.1,n=90
		testRound，d=-10.1,n=-10
		testRound，d=-10.6,n=-11
2.3 JAVA除法保留小数点后两位的两种方法 Java Math的 floor,round和ceil的总结
	https://www.cnblogs.com/cmblogs/p/4500306.html
	
三、反射？
	3.1、通过方式取出方法，参数，修饰符等？
	
	3.2、反射原理？
	
	3.3、Java面试题之Java反射的原理
		https://www.cnblogs.com/hujinshui/p/10423053.html
	
	3.4、Java面试题之反射  
		https://blog.csdn.net/ys_230014/article/details/88795929
	3.5、Java反射 简单举例 
	
		https://blog.csdn.net/li_2580/article/details/87888513
		3.5.1、反射三大作用
		
	3.6、反射可以创建类的private构造函数吗？
		一验证，不可以，放射也是在该类的外部调用来创建对象，是不可见的。
	3.7、getConstructor()和getDeclaredConstructor()
		https://www.cnblogs.com/jiangyi-uestc/p/5686264.html
	
四、java面试题之int和Integer的区别
	4.1、java面试题之int和Integer的区别	
		
		https://blog.csdn.net/bailaoshi666/article/details/82721455
		1、Integer是int的包装类，int则是java的一种基本数据类型 
		2、Integer变量必须实例化后才能使用，而int变量不需要 
		3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 
		4、Integer的默认值是null，int的默认值是0
		5.对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false
		6.记住一个原则：内存地址是否相同，进而区分。
	4.2、
		https://blog.csdn.net/login_sonata/article/details/71001851
		https://blog.csdn.net/weixin_36838630/article/details/79260140
		https://blog.csdn.net/qq_24644517/article/details/82926473
五、java,private public protect 默认修饰符作用，图标说明
	
	5.1、https://blog.csdn.net/dz77dz/article/details/81635250
	5.2、https://blog.csdn.net/chaoman3171/article/details/79645999
	
	5.3、默认的(default/friendly)	 
		如是该类型的变量。
		不同的包中有继承关系，不可见，是否代表不能使用？		
		不能直接访问，但通过反射可以使用使用。
		
		
六、abstract与interface区别？

七、dp与px的转换 
	1.https://blog.csdn.net/baidu_24743861/article/details/82977655
		
	2.Android中dp和px之间进行转换
		https://blog.csdn.net/arui319/article/details/6777133 
八、transient 
	8.1、 Java transient关键字使用小记
		https://www.cnblogs.com/lanxuezaipiao/p/3369962.html
	8.2、 
	
	8.3、transient 使用，
		高手答疑:transient关键字在何时使用? 
		https://bbs.csdn.net/topics/10197336 
		
		不过个人认为《Thinking in java》上写得很清楚了！
九、内部类。
	
	9.1、内部类 
		
十、Activity,Service,和BroadCastReceiver的ANR,无响应时长是多少? 
	
	10.1、 Activity,Service,和BroadCastReceiver的ANR,无响应时长是多少?  
		1.Activity的无响应时长是5秒.
		2.Service        20S
		3.BroadCastReceiver   10S
		
	10.2、
	
十一、%s、%1$s、%d、%1$d占位符 
	11.1、%s、%1$s、%d、%1$d占位符 
		https://blog.csdn.net/zhanyahuiv5/article/details/82688255
		
	11.2、%1$s %1$d Android string
		https://blog.csdn.net/wufen1103/article/details/7846691 
十二、【java】Comparator
	12.1、【java】Comparator的用法 
		https://blog.csdn.net/u012250875/article/details/55126531
	12.2、java comparator 升序、降序、倒序从源码角度理解 
		https://blog.csdn.net/u013066244/article/details/78997869 
十三、Java 之 assert （断言） 
	13.1、Java 之 assert （断言） 
		https://www.cnblogs.com/jpfss/p/10026877.html
		
十四、异常
	14.1、异常，调用函数发生异常，赋值语句会赋值吗？
		a= "abc";
		a= test();
	14.2 捕获应用异常写入崩溃日志。
	14.3 获取异常中的原因详细信息。
		public void uncaughtException(Thread thread, final Throwable ex){
			//通过分析日志，：
			//java.lang.Thread.run(Thread.java:818)Caused by: android.database.sqlite.SQLiteException: no such //column: testcrash (code 1)
			//发现以下方式可以获取原因：
			ex.getCause()//注意有的有原因有无原因，但都有异常信息。保存在文件中，再读取出来即可。
			
		}
		
十五、android:inputType参数类型说明 
	15.1、android:inputType参数类型说明 
		https://blog.csdn.net/chaod5659/article/details/17117193
		
十六、Java中创建枚举并赋初值。
	16.1、如果使用到枚举的值，只定义不赋值是很危险的。比如之前定义两个，后来有定义一个放到中间，将酿成大祸
		https://blog.csdn.net/u013129944/article/details/70226019/
		
		使用的时候不要使用ordinal()，而要使用定义赋值的value
17. android 加载网络 本地 Uri assets drawable 文件的路径是 
	17.1  android 加载网络 本地 Uri assets drawable 文件的路径是  
		https://blog.csdn.net/a2241076850/article/details/78044310
		
		String imageUri = "http://site.com/image.png"; // from Web
		String imageUri = "file:///mnt/sdcard/image.png"; // from SD card
		String imageUri = "content://media/external/audio/albumart/13"; // from content provider
		String imageUri = "assets://image.png"; // from assets
		String imageUri = "drawable://" + R.drawable.image; // from drawables (only images, non-9patch)  
		————————————————
		版权声明：本文为CSDN博主「ManLikeTheWind」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
		原文链接：https://blog.csdn.net/a2241076850/article/details/78044310
		
	17.2 https://blog.csdn.net/weixin_33826609/article/details/92713594
	
	17.3 android 播放assets文件里视频文件的问题
		https://www.cnblogs.com/zhujiabin/p/4831563.html
18.Android Scroller完全解析，关于Scroller你所需知道的一切 
	18.1 Android Scroller完全解析，关于Scroller你所需知道的一切 
		https://blog.csdn.net/guolin_blog/article/details/48719871

19. Android中Bitmap及相关
	19.1 Android中Bitmap大小计算 
		https://blog.csdn.net/qq_32671919/article/details/83862624
		Bitmap.Config是Bitmap中的一个内部类,在Bitmap类里createBitmap(intwidth, int height, Bitmap.Config config)方法里会用到，打开个这个类一看

		public static final Bitmap.Config ALPHA_8  

		public static final Bitmap.Config ARGB_4444 

		public static final Bitmap.Config ARGB_8888 

		public static final Bitmap.Config RGB_565  

		ARGB_8888、ARGB_4444、RGB_565、ALPHA_8
		四种类型为bitmap在内存中存在的四种色彩的存储模式，他们本质区别体现在每种模式下的bitmap内部的每个像素点，在内存中的大小和组成成分的区别。
		A->alpha（透明度）,R->red（红色）,G->green（绿色），B->blue（蓝色）
		每种模式下的一个像素的具体存储大小： 
		ARGB_8888：A->8bit->一个字节，R->8bit->一个字节，G->8bit->一个字节，B->8bit->一个字节，即8888，一个像素总共占四个字节，8+8+8+8=32bit=4byte
		ARGB_4444：A->4bit->半个字节，R->4bit->半个字节，G->4bit->半个字节，B->4bit->半个字节，即4444，一个像素总共占两个字节，4+4+4+4=16bit=2byte
		RGB_565：R->5bit->半个字节，G->6bit->半个字节，B->5bit->半个字节，即565，一个像素总共占两个字节，5+6+5=16bit=2byte
		ALPHA_8：A->8bit->一个字节，即8，一个像素总共占一个字节，8=8bit=1byte
		计算大小方式： 
		一张bitmap的大小 = 有多少个像素点 * 每个像素点内存中占用的大小 = 长 * 宽 * 3中讲的各种模式下对应的像素点占用的比特位
		例子：计算一张长宽为1000/1000，ARGB_8888格式的一张bitmap的大小： 
		1000 * 1000 * 4byte = 4000kb = 4M
		————————————————
		版权声明：本文为CSDN博主「慢慢_飞」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
		原文链接：https://blog.csdn.net/qq_32671919/article/details/83862624
	19.2 Android获取bitmap图片的大小 
		https://blog.csdn.net/linghu_java/article/details/8965112?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
		
		在Android API（12）之前的版本和后来的版本是不一样：

               public long getBitmapsize(){

                         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
          return bitmap.getByteCount();
         }
             // Pre HC-MR1
        return bitmap.getRowBytes() * bitmap.getHeight();

               }
		————————————————
		版权声明：本文为CSDN博主「linghu_java」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
		原文链接：https://blog.csdn.net/linghu_java/article/details/8965112
		
	19.3 Drawable
		19.3.1 getIntrinsicWidth() 
			
20. android 启动模式及任务栈
	20.1 android开启第三方应用加入自己的任务栈中 。。比如app使用系统相册打开图片。按back键正常。按下home键，再次打开app，没有处于图片预览状态。
	
21. android matrix 
	21.1 android matrix 最全方法详解与进阶（完整篇） 
		https://blog.csdn.net/cquwentao/article/details/51445269
		
22. canvas
	22.1 canvas变换 
		https://blog.csdn.net/cquwentao/article/details/51363719
	
23 ART、OAT格式介绍与dex文件提取 
	https://www.jianshu.com/p/065e358b9599
	
	23.1 Android中什么是Dex文件
		https://www.jianshu.com/p/795b4f01e7c8 
	23.2 android之oat文件介绍
		https://www.jianshu.com/p/b20950cc1b7c 
		
		Android运行时ART加载OAT文件的过程分析 
		https://blog.csdn.net/luoshengyang/article/details/39307813 
24 Android 息屏亮屏操作 
	24.1 Android 息屏亮屏操作
		https://blog.csdn.net/qq_27256793/article/details/86254461
		
		https://blog.csdn.net/u014614038/article/details/80430764?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase
		
		https://blog.csdn.net/u011913612/article/details/77822280?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.nonecase
		
	24.2 安卓手机双击唤醒屏幕是怎么做到的……求解答 
		https://ask.csdn.net/questions/183394
		
		手机的显示屏和触摸屏实际上是两个单独工作的组件，只不过触摸屏是接近透明的，贴在显示屏上面用户看不出来。触摸屏识别手势信号，传输给处理器，显示屏只是负责显示相应的图像。传统的手机关闭显示屏时，触摸屏也是关闭的，两者都不工作。有唤醒功能的手机如LG G3 和 HTC One M8 等，在关闭显示屏，但是触摸屏还在是通电的，在黑屏的状态下用户可以随时滑动输入，当你划出特定的手势时，就相当于给出了一个开机键的信号，处理器识别以后，屏幕开启，实现双击唤醒
		
		这个以前有做过，双击点亮屏幕或者双击打某打电话，滑动C打开照相机等之类。这个涉及到一些底层驱动开发，一般要做这个需求的话，需要先确认下手机IC是多少，然后在对应IC文件里面修改，然后底层修改完毕后会给上层一个接口，上层的话就在framework层里面修改就行
		
		那是要让TP不关闭，在驱动层做的，检测到用户双击行为后唤醒屏幕
		
	24.3 Android6.0 亮屏灭屏流程（DisplayPowerControler、WMS）（二）亮度设置 
		[android,linux,driver]
		https://blog.csdn.net/kc58236582/article/details/54616756
		
		
	24.4 Android锁屏、重启、关机开发！简单直接 
		https://blog.csdn.net/GodDavide/article/details/53098538?utm_source=blogxgwz5 
25,Android匿名共享内存（Ashmem）原理 
	25.1 Android匿名共享内存（Ashmem）原理 
		https://www.jianshu.com/p/d9bc9c668ba6
		
25，Android学习笔记（四十）：Preference的使用 
	25.1 Android学习笔记（四十）：Preference的使用 
		https://blog.csdn.net/flowingflying/article/details/6671548 
26 到底什么是AndroidX？ 
	https://blog.csdn.net/guolin_blog/article/details/97142065? 
	
	https://blog.csdn.net/ambor16/article/details/106355537  
	
	AndroidX 是对support library 的一次升级：包名 从在android.support.*下面变成androidx.*下面。
	命名规则不会再包含具体操作系统API的版本号了。
	
27 Android 5.0 如何正确启用isLoggable(一)__使用详解 
	27.1 Android 5.0 如何正确启用isLoggable(一)__使用详解
		https://blog.csdn.net/yihongyuelan/article/details/46409389 
28 //保存图片后发送广播通知更新数据库
	Uri uri = Uri.fromFile(new File(newPath));
	context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, uri));
29 应用保活及持续优化
	29.1 参考service模块
	29.2 android-job
		Android Jobscheduler使用
		https://www.jianshu.com/p/9fb882cae239 
		
		a,Android应用进程防杀指南3-JobService
			https://www.imooc.com/article/details/id/24440 
		b,认识 android-job
			https://zhuanlan.zhihu.com/p/26093468 
			
			https://github.com/evernote/android-job 
	
30 Android Jetpack
	30.1
		https://developer.android.google.cn/jetpack
		
		学习demo
		https://github.com/VcStrong/JetpackDemo
	30.2 Android Jetpack架构组件Lifecycle+ViewModel+ LiveData
		https://www.jianshu.com/p/7fbc9cb72a5b  
	30.3 Jetpack（三）：ViewModel学习记录
		https://www.jianshu.com/p/67624746a241 
		
		调试工程：*\JetpackDemo\*\RotationTestActivity.java 
		
		A,Android之ViewModel的使用
			https://www.jianshu.com/p/5fbde7a2189e 
	30.4 Android Jetpack系列--1.Lifecycle使用及源码解析 
		https://www.jianshu.com/p/373fa1a25e3b 
31 android Button设置text属性为字母时，字母自动变成大写
	https://blog.csdn.net/zhang106209/article/details/100574157 
	
	在布局中增加  android:textAllCaps="false" 就可以了 .
	因为5.1及以后[*\styles_material.xml]包含android:textAllCaps="true" 
32 对 url 中含有的中文系列问题。
	32.a
		问题引入：中文url,以下代码通不过。
		Patterns.WEB_URL.matcher(url).matches();
	32.b 对 url 中含有的中文进行转码操作
		https://www.cnblogs.com/ljmatlight/p/8472666.html  
		验证程序：AndroidJavaDemoTestForAS\javatest:urltest\StringWithUrlTest.java
		
		关键点：
			// 排除这两个特殊字符的编码
			dontNeedEncoding.set(':');
			dontNeedEncoding.set('/');
		在android中无法使用import sun.security.action.GetPropertyAction;
		解决办法将java源码拷贝过来。
		
	32.1 Android url带有中文、空格处理 
		https://www.jianshu.com/p/3734ece83400 
		
		
		关键点：
			空格是会被转义成“+”，而不是%20。
			增加replace("\\+", "%20")替换“+” 
		注意：博主代码错误，不过提供了很好的思路。
			应为：replace("+", "%20")
		
	32.2 Android 播放视频，视频的URL中包含中文，导致无法播放的解决办法。
		https://blog.csdn.net/qinwendou/article/details/82590151 
		
		解决办法就是将后面的带有中文的进行转码。
		例如：/upload/video/jc/郭顶-水星记(标清).mp4
		将郭顶-水星记(标清).mp4进行转码。
		String videoUrl = “郭顶-水星记(标清).mp4”;
		try {
			String encode = URLEncoder.encode(videoUrl, "UTF-8");
			String URL5 = ServerUrlUtils.SERVER_URL+"/upload/video/jc/"+encode;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
33. android动画
	33.1 test project
		com.sp.spmultipleapp.activity.AnimationTestActivity
	33.1 android imageview围绕中心旋转动画
		https://blog.csdn.net/weixin_33858336/article/details/92999995 
34 日志及计时
	34.1 android.util.TimingsTraceLog
		分析该类。
		阅读系统源码发现这个用法。
35 BitmapShader 用法详解
	35.1 BitmapShader 用法详解
		https://my.oschina.net/ososchina/blog/356066  
		
		使用BitmapShader-实现圆角和圆形Bitmap
		https://www.jianshu.com/p/e116d8f69058
		
		BitmapShader的简单应用
		https://blog.csdn.net/t1623183652/article/details/53008673
36 布局
	36.1 约束布局ConstraintLayout看这一篇就够了
		https://www.jianshu.com/p/17ec9bd6ca8a?