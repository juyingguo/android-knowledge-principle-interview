1.js资源
	1.1 https://www.runoob.com/js/js-function-definition.html
	
	1.2 
2. 一些基本知识点
	2.1 javascript中加var和不加var的区别
		2.1.1 javascript中加var和不加var的区别
			https://www.cnblogs.com/zhus/p/6306475.html
		2.1.2 变量声明时如果不使用 var 关键字，那么它就是一个全局变量，即便它在函数内定义。
			https://www.runoob.com/js/js-function-closures.html
	
	2.2 === 
		绝对等于（值和类型均相等）
		JavaScript 比较 和 逻辑运算符
		https://www.runoob.com/js/js-comparisons.html
	2.3 = {}
		*\45-03-js\js_project_base\04-object-01-define-obj.html
		
		javascript中[]和{}对象使用介绍
		https://www.jb51.net/article/34895.htm
	2.4 javascript与java相互调用
		2.4.1 Java与js相互调用方式及细节
			https://blog.csdn.net/qq_36640211/article/details/77719541  
			
			java调用javascript:注意参数写法
			webView.loadUrl("javascript:showDataFromJava('"+userBean.getName()+"')"); 
		2.4.2 java与js交互，相互调用传参
			https://blog.csdn.net/qq_27942511/article/details/70738986
			是一些简单的js与java的交互。要想实现复杂的交互逻辑，可以使用jsBridge这一第三方框架，吓篇博客讲会介绍这一框架的使用及原理。
			
			WebView.evaluateJavascript()，loadUrl，传递参数脚本写法有误。待验证
			
			2.4.2.2 安卓webview原生和JavaScript(js)交互传值的4种方式 java和js交互 安卓JsBridge原理解析
				https://blog.csdn.net/qiushi_1990/article/details/88046976
				传递参数脚本写法有误。待验证。正确写法，比如：
				webView.loadUrl("javascript:showQrCodeScan('" + result + "')");
				
			2.4.2.3 
				 Process: com.sp.spmultipleapp, PID: 14172
				java.lang.RuntimeException: java.lang.Throwable: A WebView method was called on thread 'JavaBridge'. All WebView methods must be called on the same thread. (Expected Looper Looper (main, tid 1) {f8e5cff} called on Looper (JavaBridge, tid 416) {decfde2}, FYI main Looper is Looper (main, tid 1) {f8e5cff})
					at android.webkit.WebView.checkThread(WebView.java:2213)
					
			2.4.2.4 WEBVIEW JS 与 JAVA 调用参数问题。
				https://www.cnblogs.com/jason-blog/p/4253096.html
				
				js传递参数给java方法的问题，在js中需要调用java方法，改方法包含一个参数，如果js传递的参数是number类型需要注意一下，在数据比较大的情况下会转化成科学计数法表示的传递给java方法。
				比如1000066099,会表示成1.00006e+09,那么会丢失一部分精度，从而导致数据传递错误。修改方案就是js传递的参数使用String类型，可以直接转化成字符串传递比如 （”“ + a）。
		2.4.3 jsBridge
		
		
		
	2.5 JavaScript事件详解
		2.5.1 JavaScript事件详解
			https://blog.csdn.net/baochao95/article/details/52231385
	2.6 对Array.prototype.slice.call()方法的理解
		https://www.cnblogs.com/happypayne/p/7739514.html
		
		测试位置：js_project_base
		
		Array.prototype.slice.call(arguments)能将具有length属性的对象(key值为数字)转成数组
	2.7 模拟自动点击事件。
		测试位置：js_project_base/06-event-01-click-03-emulate-click-use-button.html
		
	2.8 this 
		this.后面加变量。
		2.8.1
			https://www.runoob.com/js/js-this.html
			JavaScript this 关键字
			面向对象语言中 this 表示当前对象的一个引用。

			但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。

			在方法中，this 表示该方法所属的对象。
			如果单独使用，this 表示全局对象。
			在函数中，this 表示全局对象。
			在函数中，在严格模式下，this 是未定义的(undefined)。
			在事件中，this 表示接收事件的元素。
			类似 call() 和 apply() 方法可以将 this 引用到任何对象。
	
	2.9 javascript引用资源路径问题。
		
		game.load.image("background", "../../assets/images/background.jpg");
		调试验证：javascript引用资源路径应参考js所在html为基准进行路径定位，而不是根据js文件所在的路径为基准的。
	2.10 定义函数
		通过属性添加新的函数。使用vscode不能自动导航查看引用关系。//注意上下文this，that,正确后，也是可以的。
		单独定义函数，是可以的。
	
	2.11 javascript 支持函数重载吗
		浅谈JavaScript函数重载
		https://www.cnblogs.com/yugege/p/5539020.html
		
		a,验证代码：01-function-07-function-overload-01.html 
			//这种写法是不可行的。最多参数的函数才可以正确调用。如果只需要第一个参数，其余参数也需要传递值的。
		b，或者根据arguments.length来对应处理不同功能。
		
		c,JQuery之父John Resig写的《secrets of the JavaScript ninja》找到了一个绝佳巧妙的方法！那种方法充分的利用了闭包的特性！
	2.12 通过var定义的类型，才可以用vscode提示功能
		通过that，this，定义的就不能提示。
		
		即便使用var定义，不过只有在刚赋值的地方可以有提示。其它函数处就没有提示了。
		
	2.13 js 生成随机数
		https://www.runoob.com/w3cnote/js-random.html 
		ceil(x)	对数进行上舍入，即向上取整。
		floor(x)	对 x 进行下舍入，即向下取整。
		round(x)	四舍五入。
		random()	返回 0 ~ 1 之间的随机数，包含 0 不包含 1。
		
		一些实例说明：

		Math.ceil(Math.random()*10);     // 获取从 1 到 10 的随机整数，取 0 的概率极小。

		Math.round(Math.random());       // 可均衡获取 0 到 1 的随机整数。

		Math.floor(Math.random()*10);    // 可均衡获取 0 到 9 的随机整数。

		Math.round(Math.random()*10);    // 基本均衡获取 0 到 10 的随机整数，其中获取最小值 0 和最大值 10 的几率少一半。
		
		
		