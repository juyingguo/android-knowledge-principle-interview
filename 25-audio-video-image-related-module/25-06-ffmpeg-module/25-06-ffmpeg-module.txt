1. 资源
	1.1 官网
		https://www.ffmpeg.org/
		http://www.ffmpeg.org/download.html
		
		wiki:
			https://trac.ffmpeg.org/search?
		1.1.2 doc
			https://xdsnet.gitbooks.io/other-doc-cn-ffmpeg/content/ffmpeg-doc-cn-35.html 
			
			doc all:
			https://www.ffmpeg.org/documentation.html
			
			ffmpeg-all doc:
			https://www.ffmpeg.org/ffmpeg-all.html 
			
	1.2 http://git.videolan.org/?p=ffmpeg.git 
	
	1.3 GitHub
		https://github.com/FFmpeg/FFmpeg 
		直接点击[tag]就可以选择指定版本的下载。而无需通过下载源码后再切换分支（占用空间大，且此时的分支显示只有两位，如3.4而不是3.4.1）
	1.4 好例子网。
		https://www.haolizi.net/example/view_20421.html
		已充值下载。
		
	1.5 书下载
		https://www.haolizi.net/example/tags_FFmpeg_1.html
		
	1.6 ffmpeg 社区
	1.7 FFmpeg视频资源
		1.7.1 ffmpeg-Android&iOS跨平台开发
			https://www.bilibili.com/video/BV1eZ4y1p7ZM?from=search&seid=5283599842963896799 
		1.7.2 FFmpeg音视频核心技术精讲与实战
			https://www.bilibili.com/video/BV1pC4y1W7f3?from=search&seid=17603982452678631908 
			
			qq学习群：806397913：
				学习群中有老师分享的视频及代码百度网盘地址。
			杨万里的github学习资源仓库：https://github.com/wanliyang1990/ 
			博客地址：http://blog.csdn.net/ywl5320
			
			基于以下教程开发：
				csdn:
				ffmpeg打造android万能音频播放器
				FFmpeg+OpenGL ES+OpenSL ES打造Android视频播放器教程
			知识点记录以及对应该知识点扩展
				1.7.2.1 Android studio使用ndk native c调用OpenSLES播放声音
					https://blog.csdn.net/tom_221x/article/details/64131555
					
					Android 播放音频（PCM）的两种方法--AudioTrack/OpenSL ES使用简介 
					https://blog.csdn.net/myvest/article/details/104375789? 
		1.7.3 FFmpeg安卓流媒体播放器开发实战视频课程 -基于NDK、C++和 FFmpeg Android... 
			https://www.bilibili.com/video/BV1aJ411Y7GK?from=search&seid=8079659670678290582 
			淘宝也有资源卖：
			老夏课堂：
			http://laoxiaketang.com/  
				【老夏课程单独记录在：25-06-02-ffmpeg-laoxia-learn-record.txt】
			
			FFmpeg 4.2 从基础实战-多路H265监控录放开发
			哔哩哔哩资源：
			https://www.bilibili.com/video/BV1qV411o7zx?from=search&seid=17261540113384188918 
			腾讯课堂资源：
			https://ke.qq.com/course/2027387?taid=8356361387569019 
			
			Linux项目实战：自制视频监控系统！使用FFmpeg编辑视频全攻略 #第3课# 
			https://www.bilibili.com/video/BV1aK4y1k7pN?from=search&seid=9468635879410232171 
			
	1.8 ffmpeg ./configure 的相关参数说明
		https://blog.csdn.net/fengsh998/article/details/79443503
		注意该文档有错误，ARCH说明有误，需要在configure文件中查看ARCH_LIST
		ffmpeg----configure参数配置说明
		https://blog.csdn.net/huweijian5/article/details/104369194
		
	1.9 ffmpeg使用参考案例：
			https://trac.ffmpeg.org/wiki/Scaling
			https://trac.ffmpeg.org/wiki
	
	1.10 ffmpeg 源代码简单分析
		https://blog.csdn.net/leixiaohua1020/article/details/12678577 
	1.11 FFMPEG使用参数详解 
		https://blog.csdn.net/axdc_qa_team/article/details/4204358 
		
		https://ffmpeg.org/ffmpeg-all.html 
		
2. FFmpeg从入门到精通读书笔记（1）
	2.1 FFmpeg从入门到精通读书笔记（1） 
		https://blog.csdn.net/hanxiucaolss/article/details/100007475
		
3. 好例子网_FFmpeg从入门到精通_刘歧;赵文杰(著) 读书记录
	
	3.1.4 chapter4 
		4.1 GOP 
			视频编解码 GOP基本概念
			https://blog.csdn.net/daiqiao_ios/article/details/80751322
			
			GOP 指的就是两个I帧之间的间隔. 比较说GOP为120,如果是720 p60 的话,那就是2s一次I帧.
			在视频编码序列中，主要有三种编码帧：I帧、P帧、B帧，如下图所示。
			1. I帧即Intra-coded picture（帧内编码图像帧），不参考其他图像帧，只利用本帧的信息进行编码
			2. P帧即Predictive-codedPicture（预测编码图像帧），利用之前的I帧或P帧，采用运动预测的方式进行帧间预测编码
			3. B帧即Bidirectionallypredicted picture（双向预测编码图像帧)，提供最高的压缩比，它既需要之前的图
			像帧(I帧或P帧)，也需要后来的图像帧(P帧)，采用运动预测的方式进行帧间双向预测编码
			
			码流 / 码率 / 比特率 / 帧速率 / 分辨率 / 高清的区别
			https://blog.csdn.net/xiangjai/article/details/44238005
			
4.编译FFmpeg
	4.0,我的实验。总结。实验及异常记录在[4.1.3]		
		实验发现，各种编译提示错误。但都没有按照脚本中prefix指定的存放目录来存放。
			ffmpeg与NDK版本要配合。因为不同ndk版本，采用编译器不同，低版本ndk_r17前采用gcc,高版本采用clang；所以照着网上的文章做当然编译不起来。
			参考：[4.1.4.5]中的文章得以理解。
		4.0.2，此时看看ffmpeg及NDK官网相关内容。
		
		4.0.3 Out of tree builds are impossible with config.h in source dir 
			http://www.voidcn.com/article/p-wsqnaflg-bbv.html 
			
			原因及解决办法：
			由于之前在ffmpeg下面执行过./configure,生成config.h
			再次执行会出现该错误。删除ffmpeg 下面的config.h。就可以再次执行脚本了。
		4.0.4 
			src/libavformat/udp.c:290:28: error: request for member 's_addr' in something not a structure or union
			mreqs.imr_multiaddr.s_addr = ((struct sockaddr_in *)addr)->sin_addr.s_addr;
	
			论坛讨论：
			https://bbs.csdn.net/topics/392515839?list=2277494 
			
			参考博客：
			https://blog.csdn.net/qq_34902522/article/details/87879145
			
			解决方案：升级到NDK17C版本即可，不要升级到NDK17以后版本，因为17以后版本GCC分离。
		4.0.5 
			ffmpeg4.2.4,nkd-r17c,
			In file included from src/libavfilter/aeval.c:26:0:
			src/libavutil/avassert.h:30:20: fatal error: stdlib.h: No such file or directory
			#include <stdlib.h>
			
			参考博客：：
			https://blog.csdn.net/luo0xue/article/details/80048847 
			https://blog.csdn.net/shulianghan/article/details/104235410 
			https://www.jianshu.com/p/e3fb667dacae 
			
			现这个错误是因为使用最新版的NDK造成的，最新版的NDk将头文件和库文件进行了分离，我们指定的sysroot文件夹下只有库文件，而头文件放在了NDK目录下的sysroot内，只需在--extra-cflags中添加 "-isysroot $NDK/sysroot" 即可，还有有关汇编的头文件也进行了分离，需要根据目标平台进行指定 "-I$NDK/sysroot/usr/include/arm-linux-androideabi"，将 "arm-linux-androideabi" 改为需要的平台就可以，终于可以顺利的进行编译了

		4.0.6 
			ffmpeg4.2.4,nkd-r17c;
			/android-ndk-r17c/sysroot/usr/include/linux/types.h:21:23: fatal error: asm/types.h: No such file or directory
			#include <asm/types.h>
			汇编头文件和库文件也进行了分离。参考【4.0.5】及对应的博客。
		4.0.7 Android之解决ffmpeg编译的库文件在android上运行失败，/lib/x86/libavcodec.so: has text relocations
			https://blog.csdn.net/u011068702/article/details/79670739 
			
			https://www.kanzhun.com/jiaocheng/198402.html 
			6.0之前只会产生一个警告，系统还是可以正常加载包含text relocations的共享库的，但从6.0起，即SDK Version>=23时，系统将会拒绝加载包含text relocations的共享库，同时输出错误Log，根本原因，是so动态链接库的代码并非PIC（Position independent code）			最好的办法是去修复源代码然后编译，我们这里调用别人的so,没办法了，如果是自己的so,在使用NDK编译so时配置Android.mk，增添PIC相关的配置项，这样编译出来的so文件将不再有text relocations的问题。具体配置如下：

			LOCAL_LDFLAGS += -fPIC
			
			a,验证后：还是同样报错。
			b,继续在cmake中的cppFlags中添加-fPIC，来验证
				externalNativeBuild {
					cmake {
						cppFlags "-std=c++11 -fPIC"
					}
					ndk{
						abiFilters "armeabi-v7a","x86"
					}
				}
			c,是否和【编译的过程中产生的中间件的存放目录】有关，虽然配置脚本中--extra-cflags添加-fPIC。
				全部删除中间件文件后，在重新编译。
				结果：还是不行
			d,ffmpeg安卓x86平台编译错误(libavcodec.so: has text relocations)
				https://blog.csdn.net/marco_0631/article/details/73292199 
				【官网wiki搜索关键字可以看到】
				官方描述中，x86平台会出现此问题，而armv7-a 、x86_64都没有这样的问题，所以只需要针对x86平台解决即可。

				OK，可以通过编译时添加 –disable-asm参数解决，设置参数关闭汇编后，编译后.so文件就不存在text relocations了。

				可以通过以下方式检查，so文件中是否存在text relocations。
				
				检查so是否有has text relocations方法：
				readelf -a libavcodec.so | grep TEXTREL 
				
				验证结果：是可行的。
		
		4.0.8 
			libavcodec/aaccoder.c: In function 'search_for_ms':
			libavcodec/aaccoder.c:803:25: error: expected identifier or '(' before numeric constant
								 int B0 = 0, B1 = 0;
									 ^
			参考【4.0.4 】博客

		4.0.9 
			ffmpeg3.4.8,nkd-r17c;
			fftools/ffserver.o:ffserver.c:function main: error: undefined reference to 'stderr'
			fftools/ffserver.o:ffserver.c:function main: error: undefined reference to 'stdout'
			collect2: error: ld returned 1 exit status
			make: *** [ffserver_g] Error 1
		4.0.10 
			
			
	4.1 Ubuntu 16.04编译FFmpeg
		4.1.1 Ubuntu 16.04编译FFmpeg 4.1
			https://blog.csdn.net/xucongyoushan/article/details/85132671
		4.1.2 Ubuntu16.04 环境下编译ffmpeg生成静态库和共享库
			https://blog.csdn.net/u010821666/article/details/74905654
			
			参考官方文档
			https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#RevertingChangesMadebyThisGuide
			
		4.1.3 参考：何俊林书籍：android音视频开发
			4.1.3.1 实验条件
				我在实验时，采用ubuntu16.4,nkd-r20,ffmpeg-4.2.4。
			4.1.3.2
				在编译前 ， 在源码中修改 FFmpeg 的 configure 文件。由于编译出来的动态库文件名 的版本
				号在 .so 之后（例如“ libavcodec.so.5 .100. l 勺，而 Android 平台不能识别这样的文件名 ，所以需
				要修改该文件名。在 configure 文件中找到下面儿行代码（ 在 3209-3212 行）：
			
				SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'
				LIB_INSTALL_EXTRA_CMD='$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'
				SLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'
				SLIB_INSTALL_LINKS='$(SLIBNAME)'
				
			4.1.3.3 
				／etc/profile.d 下创建配置脚本
				android_ndk_env.sh
				#!/bin/sh
				#ANDROID_NDK是ndk目录，替换为实际电脑上ndk路径。
				export ANDROID_NDK="/home/eink/soft_tools/ndk/android-ndk-r20" 
				export PATH=$ANDROID_NDK:$PATH
			
			4.1.3.4 
				配置ffmpeg编译脚本。
				ffmpeg_build_android.sh 
				注意书中，linux下编译时，脚本中--target-os=linux，应该为android.
			4.1.3.5 
				关于make: *** No rule to make target `clean'. Stop.这个莫名其妙问题的解决方法
				https://www.cnblogs.com/mmix2009/p/3191596.html
			
			4.1.3.6
				a. Unknown option "".
				See ./configure --help for available options.

			4.1.3.7
				b.
					/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc is unable to create an executable file. C compiler test failed.
					
					编译器不对，参考[4.1.4.5 ]
					
					c,或者参考播客：
					https://blog.csdn.net/mr_tony/article/details/50758786 
					
					d,或者编译器没有指定版本
						--cc=$TOOLCHAIN/bin/arm-linux-androideabi-gcc \
						是否需要指定--cc版本
						TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64
						--cc=$TOOLCHAIN/bin/arm-linux-androideabi-gcc-4.9.x \
						验证结果：【还是不行。】
						
						验证去掉--cc配置工具链TOOLCHAIN以后，会自动找到--cc编译器。
						是否为其它配置有误，简洁导致这个错误提示呢？
						
					e,无意中包--cpu=$CPU 配置成armeabi-v7a。会报该错误。
						CPU=arv7-a
						--cpu=$CPU
						
						注意：--cpu是不需要指定的。会自动选择。
						正确配置核对参数参考【1.8】
			4.1.3.8 
				参考[4.1.4.5 ]
				./android_ffmpeg_4.2.1_android_ndk_r20.sh: line 32: --cxx=/home/eink/soft_tools/ndk/android-ndk-r20/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++: No such file or directory
				./android_ffmpeg_4.2.1_android_ndk_r20.sh: line 34: --enable-cross-compile: command not found
				
				[4.1.4.5 ]配置作者可能漏加了。评论区有网友指出。
				--cc=$CC
				 --cxx=$CXX
				后面需要添加 \
				 --cc=$CC \
				 --cxx=$CXX \
			4.1.3.9 
				编译armv7-a正常，切换CPU=armv8-a时，shell没有任何输出，也没错误提示，各种奇怪的现象，比如获取函数参数值是传入的一半。
				根本原因是：在window下编写，换行回车甚至的空格等等，造成在linux下运行，完全不是期望的结果，也没有错误提示等等。所以shell一定要在linux下编写，运行就不会各种莫名其妙的问题.
		4.1.4 FFmpeg移植到android平台，通过ubuntu编译ffmpeg
			4.1.4.1 编译FFmpeg4.1.3并移植到Android app中使用（最详细的FFmpeg-Android编译教程） 
				https://blog.csdn.net/bobcat_kay/article/details/80889398
				
			4.1.4.2 ffmpeg开发之旅(5)：详解ffmpeg编译与在Android平台上的移植
				https://blog.csdn.net/liu3364575/article/details/78395494
			4.1.4.3 ubuntu14.04系统Android NDK编译ffmpeg遇到的问题 
				https://blog.csdn.net/ameyume/article/details/87283909
				
			4.1.4.4 Android使用FFmpeg(一)--编译ffmpeg
				系列博文
				https://www.jianshu.com/p/ca7ffd2e5e68
				
			4.1.4.5 FFMPEG-Android利用ndk(r20)编译最新版本ffmpeg4.2.1
				含有多个平台架构的配置说明。
				https://juejin.cn/post/6844903945496690696 
				对于build_android.sh文件的说明
				为什么新版本的ffmpeg搭配新版本的ndk编译很容易出错呢？其实关键点主要还是新旧版本ndk中的交叉编译工具不一样导致的。比如旧版本（r17及之前）的ndk中的编译器用的是gcc，而网上大部分的同类文章中用的也是gcc，而新版本的ndk文件已经弃用gcc编译器改用clang了，所以照着网上的文章做当然编译不起来）
				
				汇总：arch,cpu;
				#armv7-a
				ARCH=arm
				CPU=armv7-a
				#armv8-a
				ARCH=arm64
				CPU=armv8-a
				#x86
				ARCH=x86
				CPU=x86
				#x86_64
				ARCH=x86_64
				CPU=x86-64
		4.1.4 --enable-cross-compile: command not found
				
	4.2 windows下编译FFmpeg
		4.1 待实验。
			
	4.3 编译Android平台使用的FFmpeg(armeabi,armeabi-v7a,arm64-v8a,x86,x86_64)
		https://blog.csdn.net/yuxiatongzhi/article/details/80096802 
		
		验证工程：*\25-06-ffmpeg-module\ffmpeg-multi-platform-support-config\*.sh		
	
5. FFmpeg 开源项目分析
	
	5.1 FFmpeg 开源项目分析
		系列博文。
		https://www.jianshu.com/p/a7240d3fffd4    
		含有ffmpeg多平台编译配置。使用函数传参指定cpu类型。
		
6. ffmpeg 安装及使用过程解析
	6.1 ffmpeg Windows下的安装及使用过程解析
		https://www.cnblogs.com/pengpengboshi/p/12627715.html
		
		6.1.1 下载安装，配置环境变量见文档
			windows下配置环境变量：
			如ffmpeg-4.3.1。
			定义系统变量名称FFMPEG_HOME 为解压路径:: D:\juying\java2\ffmpeg-4.3.1-2020-11-19-full_build
			将%FFMPEG_HOME%\bin追加到系统变量path中。前后添加英文分号。
			
		6.1.2 使用过程记录见 [7]
	6.2 ffmpeg linux下的安装及使用过程解析
7. ffmpeg使用过程记录见 [7]	
	7.0 详细的使用说明（英文）：
		http://ffmpeg.org/ffplay.html
		http://ffmpeg.org/ffprobe.html
		
		FFMPEG 参数详细说明
		https://blog.csdn.net/z2066411585/article/details/81237583
	
	7.1 ffmpeg Windows下使用过程解析
		https://www.cnblogs.com/pengpengboshi/p/12627715.html
	
		7.1.1 视频格式转换：ffmpeg -i num.mp4 -codec copy num2.avi

			将num.mp4复制并转换为num2.avi
			-i后表示要进行操作的文件
		7.1.2 gif制作：ffmpeg -i num.mp4 -vframes 20 -y -f gif num3.gif

			将num.mp4的前20帧制作为gif并命名为num3
		7.1.3 视频截取：ffmpeg -i num.mp4 -ss 0 -t 3 -codec copy cut1.mp4

			-ss后数字表示截取时刻，-t后数字表示截取时长

			截取视频某一时刻为图片：ffmpeg -i num.mp4 -y -f image2 -ss 2 -t 0.001 -s 400x300 pic.jpg

			将2s时刻截取为400x300大小的名为pic.jpg的图片（-ss后的数字为截取时刻）
		7.1.4 每秒截取一张图片：ffmpeg -i num.mp4 -r 1 image%d.jpg

			将视频num.mp4进行每秒截取一张图片，并命名为imagei.jpg（i=1，2，3...）

			注：-r后的数字表示每隔多久截取一张
			
			//验证时，并不正确。
		7.1.5 使用ffmpeg调整图像大小
			https://blog.csdn.net/yz099/article/details/108082980
			
			指定长宽：
			ffmpeg -i input.jpg -vf scale=320:240 output_320x240.png

			指定长，高度按比例缩放：
			ffmpeg -i input.jpg -vf scale=320:-1 output_320x240.png

			缩放为之前的两倍：
			ffmpeg -i input.jpg -vf scale=iw*2:ih input_double_width.png

			缩放为之前的二分之一：
			ffmpeg -i input.jpg -vf scale=iw*.5:ih*.5 input_half_size.png
			ffmpeg -i input.jpg -vf scale=iw/2:ih/2 input_half_size.png

			参考案例：https://trac.ffmpeg.org/wiki/Scaling
				https://trac.ffmpeg.org/wiki
	7.2 提取音频、视频数据 
		https://www.cnblogs.com/fandx/p/12121019.html 
		https://blog.csdn.net/sxc1989/article/details/85342427 
		
		ffmpeg截取mp3指定时间的内容
		https://blog.csdn.net/weixin_36270623/article/details/97141895
		
		提取yuv原始视频数据
			ffmpeg -i input.mp4 -an -c:v rawvideo -pix_fmt yuv420p out.yuv
			-i : 指定视频数据
			-an  : 去除音频
			-c:v rawvideo : 指定视频进行重新编码，编码为原始rawvideo数据
			-fix_fmt yuv420p :  指定视频的重新封装的像素格式
		提取PCM原始音频数据 
			ffmpeg -i input.mp4 -vn -ar 44100 -ac 2 -f s16le out.pcm
			 -i : 指定视频数据
			 -vn : 去除视频数据
			 -ar : 音频的采样率 是441000 kb
			 -ac2 : 音频 c是china的意思 2 是双声道
			 -f s16le : 音频的格式s16le存储方式
	7.3 ffmpeg命令高级进阶 
		https://blog.csdn.net/bsmmaoshenbo/article/details/94401931 
8. FFmpeg在基于Android上有哪些应用。
	8.1 FFmpeg在基于Android的楼宇可视对讲程序中的应用 
		http://www.fx361.com/page/2017/0729/2117898.shtml
		
		ffmpeg在楼宇可视对讲系统中的应用
		【知网空间】，及同类文献
		https://www.cnki.com.cn/Article/CJFDTotal-JCFH201402012.htm
		
		文章中有一些书籍和文献可以参考
		
		Android平台点对点音视频对讲 
			https://www.haolizi.net/example/view_39669.html 
		基于Android的可视对讲（转） 
			https://blog.csdn.net/zhjfover/article/details/52983762  
			原文地址：：http://news.eeworld.com.cn/mcu/article_2016091929533.html 
		【转载】基于WebRTC的Android数字楼宇对讲系统回声消除 
			https://blog.csdn.net/woaitingting1985/article/details/81938565? 
	8.2 Android基于Ffmpeg 的软编软解的可视对讲 
		https://my.oschina.net/zengliubao/blog/305890 
		https://blog.csdn.net/weixin_33888907/article/details/92538832?
		1.没有回音消除。直接上源码（应用层）！
		2.代码简要说明：

		 * 代码是在手机上运行的，也包含一个平板上的apk(平板的ui好看点但是bug多，先开启wifi)
		 * 对讲的两个设备应在同一个WLAN中。输入Ip后点击开始了其他的看代码吧！
		3、代码下载地址：

			http://download.csdn.net/detail/isnowflake/7807157
			
			调试代码移植到工程AndroidJavaDemoTestForAS中的module:videoTalk0823,as开发
			因原有项目是ecipse adt project ,as导入时以module方式并选择这个类型导入。
		8.2.1 ffmpeg摄像头采集h264编码RTP发送
			https://www.cnblogs.com/lidabo/p/8663062.html 
			a,ffmpeg综合应用示例（一）——摄像头直播
			https://www.cnblogs.com/lidabo/p/8663043.html
				源码：https://download.csdn.net/detail/nonmarking/9055683 
				Hui Zhang github技术资料
				https://github.com/zhanghuicuc
				https://blog.csdn.net/nonmarking 
			
			b,FFMPEG 实时解码网络H264码流，RTP封装 
				https://blog.csdn.net/fang437385323/article/details/52336680 
				b1,FFMPEG实时解码网络视频流（回调方式）
					https://blog.csdn.net/fang437385323/article/details/71247065 
			c,rtp 实时传输视频流 ffmpeg解码显示 
				https://www.iteye.com/blog/mjlong123-2194880 
				c1
				我通过参考网络中的许多大神的文章后开发出的android 应用 rtp实时传输h264编码的视频流到远端设备上显示。代码共享：https://github.com/mjlong123123/RemoteCamera/ 
				c2 含有RTP头定义
					
			d,使用FFMPEG+H264实现RTP传输数据
				http://www.voidcn.com/article/p-xhnnzsnr-bgm.html 
				【及其关联文章参考】
				
				如何使用FFMPEG+H264实现RTP传输数据
				http://www.javashuo.com/article/p-wuvyxxnr-z.html 
			e,利用ffmpeg进行摄像头提取视频编码为h264通过RTP发送数据到指定的rtp地址
				https://blog.csdn.net/chinabinlang/article/details/70210022? 
			f，如何发送和接收RTP封包的H264，用FFmpeg解码 
				https://blog.csdn.net/zhoubotong2012/article/details/86510032 
				
				f1【博主有系列ffmpeg及其它相关领域的知识。】
				f2 如何用FFmpeg API采集摄像头视频和麦克风音频，并实现录制文件的功能 
					https://blog.csdn.net/zhoubotong2012/article/details/79338093 
					
					f2.1 下载地址：https://download.csdn.net/download/zhoubotong2012/10252187
						找对应积分少的资源。
					f2.2 对应在其它平台中的实现
						android实现
						qt实现。
					f2.3 本文论坛讨论
						应该在加一个配置，是否推到rtmp的服务地址，即把采集的数据推流，不一定要保存为文件。
						把摄像头数据和麦克风数据保存成文件，为啥先要 avcodec_decode_video2 然后又avcodec_encode_video2啊？
							其实这里不是一定需要这样写，如果输出的就是YUV420格式的图像，直接送给编码器就行了
				f3 使用FFmpeg命令行进行UDP、RTP推流（H264、TS），ffplay接收
					https://blog.csdn.net/zhoubotong2012/article/details/86711097 
				
				f4 使用FFmpeg命令行进行UDP、RTP推流（H264、TS），ffplay接收 
					https://blog.csdn.net/zhoubotong2012/article/details/86711097 
		8.2.2 FFMPEG实现RTSP中H264数据流解码 并且实时播放
			a，FFMPEG实现RTSP中H264数据流解码 并且实时播放
				【博主有ffmpeg系列课程】
				https://blog.csdn.net/yunge812/article/details/79709307 
				
				
	8.3 Android系统下基于FFmpeg框架的多媒体播放器研究
		【及同类文献】
		https://cdmd.cnki.com.cn/Article/CDMD-11415-1016068240.htm  
		
		Android多媒体平台下基于FFMPEG的音视频处理方案研究
			https://xueshu.baidu.com/usercenter/paper/show?paperid=8dd38ffe68a0a9c817a343704cba712e&site=xueshu_se
	8.4 基于Android平台的无线视频监控系统设计与研究
		https://xueshu.baidu.com/usercenter/paper/show?paperid=1g2e0tr09d0t08f0g76c0090rk625442
		
		http://d.wanfangdata.com.cn/thesis/D01635927
		
		赵红超 - 河北工业大学
		可以实际应用。
		标题英文翻译：Design and research of wireless video surveillance system based on Android platform
		
		英文搜索：
		Design of a home surveillance system based on the android platform
			https://sci-hub.st/10.1109/FSKD.2015.7382275
		
	8.5 Design and implementation of video monitoring system based on Android
		即：基于Android的视频监控系统设计与实现
		已下载
	8.6 Android录屏并利用FFmpeg转换成gif（一）录屏
		
		https://blog.csdn.net/minghuang2017/article/details/79050563
		8.6.0 Android录屏并利用FFmpeg转换成gif（一）录屏
			a,源码：
				https://github.com/MingHuang1024/GifRecorder
			b,如果要一个单独的录屏app源码，可以参考 https://github.com/yrom/ScreenRecorder
			
		8.6.1 Android录屏并利用FFmpeg转换成gif（二）交叉编译FFmpeg源码
			https://blog.csdn.net/MingHuang2017/article/details/79112682 
			
			开发环境：

			操作系统：Ubuntu 16.04 LTS
			FFmpeg源码：ffmpeg-3.4.1
			NDK版本：android-ndk-r15c
			
			假设既不考虑交叉编译，也不考虑裁剪，编译FFmpeg
			~$ ./configure
			~$ sudo make
			~$ sudo make install
			
			FFmpeg所支持的所有编码器，解码器等可以用 --list-decoders , --list-encoders等参数来查看，非常多，一般是根据需要选择几种。
			
				注意：验证发现，在ffmpeg4.3.1 中。使用以上方式提示无效命令。
				使用ffmpeg -h 
				-decoders           show available decoders
				-encoders           show available encoders
			二、交叉编译FFmpeg
				记录一些需要注意的：
				--target-os=OS 编译目标操作系统，我们的目标是android系统，使用linux内核，要指定为linux
				
		8.6.2 Android录屏并利用FFmpeg转换成gif（三） 在Android中使用ffmpeg命令
			https://blog.csdn.net/MingHuang2017/article/details/79186513
			引用文章：：
				Android 集成 FFmpeg (二) 以命令方式调用 FFmpeg
				【王英豪】的系列文章。
					https://www.jianshu.com/p/6e556d336b1d#comment-18266369
				
				Android 集成 FFmpeg (一) 基础知识及简单调用
					https://www.jianshu.com/p/f23c62820b79
					
					--target-os=linux ：Android 内核为 Linux ，故在此指定为 linux ，如果要编译的目标系统为 ios ，则指定为 darwin 。
						//注意是老版本才用linux;3.4版本后用android，否则会发生一些找不到的错误。
			android studio会自动把编译好的so文件存放在app/build/intermediates/cmake/debug/obj/armeabi等几个目录下
			关联文章：费了这么大劲就是为了这个libffmpeg.so文件，其实编译这个文件也可以不在android工程中进行，因为实际上我们的工程只要引用这几个so包而已，至于怎么编译这些so包并不在本工程的职责范围内。
			要在工程外编译请参考：
				在命令行下用cmake交叉编译可在android中运行的so包https://blog.csdn.net/MingHuang2017/article/details/78938852 
				cmake使用独立工具链交叉编译可在android中运行的so包
				https://blog.csdn.net/MingHuang2017/article/details/79000345
				
			
			  I:/juying/ffmpeg/ffmpeg-3.1.11/libavutil/common.h:45:32: fatal error: libavutil/avconfig.h: No such file or directory
			#include "libavutil/avconfig.h"
			使用和博主一致的版本试试：I:\juying\ffmpeg\FFmpeg-3.4.1 
		8.6.3 
		8.6.4 对应我的验证
			环境：windows，android-ndk-r13b-windows-x86_64, androidstudio;
			
			q1 问题：
				FFmpeg-n3.4.1/libavutil/common.h:45:32: fatal error: libavutil/avconfig.h: No such file or directory
				FFmpeg-n3.4.1/libavutil/common.h:45:32: fatal error: libavutil/ffversion.h: No such file or directory
				
				GifRecord project:
				
				参考博客：：
				https://blog.csdn.net/weixin_34032827/article/details/92587224
				查看源码后的确没有...囧TT~

				编辑一个avconfig.h放到libavutil目录里就解决了报错问题；avconfig.h内容如下:
				/* Generated by ffconf */
				#ifndef AVUTIL_AVCONFIG_H
				#define AVUTIL_AVCONFIG_H
				#define AV_HAVE_BIGENDIAN 0
				#define AV_HAVE_FAST_UNALIGNED 0
				#endif /* AVUTIL_AVCONFIG_H */
			q2,
				cmdutils.c:1119:39: error: expected ')' before 'FFMPEG_VERSION'
  
				av_log(NULL, level, "%s version " FFMPEG_VERSION, program_name);
				
				解决办法：添加ffversion.h
					其余定义和其它.h文件一样。
					#define FFMPEG_VERSION "3.4.1"

	8.7 Android移动端音视频监控系统(源码+数据库+文档) 
		https://www.haolizi.net/example/view_203735.html 
		
	8.8 Android平台点对点音视频对讲  
		https://www.haolizi.net/example/view_39669.html  
		
	8.9 Android录制视频源码  
		https://www.haolizi.net/example/view_3788.html 
		
	8.10 C++音视频即时通讯源代码 
		https://www.haolizi.net/example/view_121556.html 
	8.11 Visual C++音视频编解码技术及实践（全）  
		https://www.haolizi.net/example/view_163511.html 
	8.12 android 仿微视 视频录制播放源码  
		https://www.haolizi.net/example/view_4125.html 
		
		github:https://github.com/panzhoutao/VideoRecorder-master 
		gradle project：https://github.com/qdrzwd/VideoRecorder
		有参考价值：原项目描述见README
		该项目调试工程位置：
		
	8.13 android语音、视频通话源码包（完美无回声） 
		https://www.haolizi.net/example/view_7824.html 
	8.14 基于Qt、FFMpeg的音视频播放器 
		https://www.haolizi.net/example/view_21723.html 
		
		关联我的博客https://blog.csdn.net/hfuu1504011020/article/details/82588399（环境准备），程序中有很详细的代码注释，我的博客也对其每个部分进行了详细的解释说明。
	8.15 计算机图形学（何援军） 
		https://www.haolizi.net/example/view_91386.html 
	8.16 视频网站开发（仿土豆网 ）  
		https://www.haolizi.net/example/view_118660.html 
	8.17 Android视频采集+RTSP 
		https://www.haolizi.net/example/view_100402.html 
	8.18 android h263硬编码rtp打包  
		https://www.haolizi.net/example/view_3636.html 
		
	8.19 RTP实时传输H.264  
		https://www.haolizi.net/example/view_104890.html 
		
		C++ RTSP/RTP流媒体服务器源码
		https://www.haolizi.net/example/view_176288.html 
		
	8.20 RTP传输h264码流例子  
		https://www.haolizi.net/example/view_89444.html 
	8.21 H264编解码rtp发送 
		https://www.haolizi.net/example/view_131259.html 
		
	8.22 
		https://github.com/wuhaoyu1990/MagicCamera 
		https://github.com/spex66/RTSP-Camera-for-Android 
9. ffmpeg超详细综合教程
	【ffmpeg超详细综合教程一】
	http://www.360doc.com/content/16/0711/20/9008018_574787603.shtml 
	【ffmpeg超详细综合教程二】
	http://www.360doc.com/content/16/0304/20/9008018_539447805.shtml
	还有一些。以及源码分析等。具体查看博主资源。
	
	【或者csdn系列教程】
	ffmpeg超详细综合教程（二）——为直播流添加滤镜 
	https://blog.csdn.net/wh8_2011/article/details/73506128 
	
	9.3 ffmpeg综合应用示例（三）——安卓手机摄像头编码
		博主有视频相关播客分享。
		https://blog.csdn.net/nonmarking/article/details/48601317? 
	9.4 开源项目-基于rtp的编解码视频流实时传输的实现，博客地址：http://blog.csdn.net/w401229755
		https://github.com/myhouselove/jrtp-ffmpeg-camera 
		
		【相关开发资源可以参考】
	9.5 ffmpeg+rtp搜索记录 
		https://github.com/search?p=1&q=ffmpeg+rtp&type=Repositories 
	9.6 FFmpegFrameRTPStreamer 
		https://github.com/AdiKulkarni/FFmpegFrameRTPStreamer 
		
		FFmpeg based RTP video streaming over android.

		##Dependencies This project depends on https://github.com/AdiKulkarni/myFFmpegX264LatestLibAndroid and https://github.com/fyhertz/libstreaming.
		
10 FFmpeg 详尽编译过程 (use ndk-build)
	https://blog.csdn.net/junhuahouse/article/details/79236932  
11 FFMPEG之雷霄骅学习记录
	11.1 基于FFmpeg+SDL的视频播放器的制作——雷霄骅
		https://b23.tv/1EsE12?share_medium=android&share_source=qq&bbid=XYCDBB3C2CE7545ECD20C449646BAFC69881F&ts=1611667246384
		Bibi
		雷神的资料和视频：链接: https://pan.baidu.com/s/1hEHryIRAP8O3XPTMacd85w 密码: z8gc 
	
	11.2 [总结]FFMPEG视音频编解码零基础学习方法
		https://blog.csdn.net/leixiaohua1020/article/details/15811977 
last 技术点知识点
	last01 FFMPEG之AVRational TimeBase成员理解 
		https://blog.csdn.net/xiaojun111111/article/details/79701314 
		博主，【ffmpeg,linux等多个系列文章】