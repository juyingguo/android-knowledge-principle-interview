1. 资源
	1.1 官网
		https://www.ffmpeg.org/
		http://www.ffmpeg.org/download.html
	1.2 http://git.videolan.org/?p=ffmpeg.git 
	
	1.3 GitHub
		https://github.com/FFmpeg/FFmpeg 
		直接点击[tag]就可以选择指定版本的下载。而无需通过下载源码后再切换分支（占用空间大，且此时的分支显示只有两位，如3.4而不是3.4.1）
	1.4 好例子网。
		https://www.haolizi.net/example/view_20421.html
		已充值下载。
		
	1.5 书下载
		https://www.haolizi.net/example/tags_FFmpeg_1.html
		
	1.6 ffmpeg 社区
	1.7 FFmpeg视频资源
		1.7.1 ffmpeg-Android&iOS跨平台开发
			https://www.bilibili.com/video/BV1eZ4y1p7ZM?from=search&seid=5283599842963896799
	1.8 ffmpeg ./configure 的相关参数说明
		https://blog.csdn.net/fengsh998/article/details/79443503
		注意该文档有错误，ARCH说明有误，需要在configure文件中查看ARCH_LIST
		ffmpeg----configure参数配置说明
		https://blog.csdn.net/huweijian5/article/details/104369194
		
	1.9 ffmpeg使用参考案例：
			https://trac.ffmpeg.org/wiki/Scaling
			https://trac.ffmpeg.org/wiki
		
2. FFmpeg从入门到精通读书笔记（1）
	2.1 FFmpeg从入门到精通读书笔记（1） 
		https://blog.csdn.net/hanxiucaolss/article/details/100007475
		
3. 好例子网_FFmpeg从入门到精通_刘歧;赵文杰(著) 读书记录
	
	3.1.4 chapter4 
		4.1 GOP 
			视频编解码 GOP基本概念
			https://blog.csdn.net/daiqiao_ios/article/details/80751322
			
			GOP 指的就是两个I帧之间的间隔. 比较说GOP为120,如果是720 p60 的话,那就是2s一次I帧.
			在视频编码序列中，主要有三种编码帧：I帧、P帧、B帧，如下图所示。
			1. I帧即Intra-coded picture（帧内编码图像帧），不参考其他图像帧，只利用本帧的信息进行编码
			2. P帧即Predictive-codedPicture（预测编码图像帧），利用之前的I帧或P帧，采用运动预测的方式进行帧间预测编码
			3. B帧即Bidirectionallypredicted picture（双向预测编码图像帧)，提供最高的压缩比，它既需要之前的图
			像帧(I帧或P帧)，也需要后来的图像帧(P帧)，采用运动预测的方式进行帧间双向预测编码
			
			码流 / 码率 / 比特率 / 帧速率 / 分辨率 / 高清的区别
			https://blog.csdn.net/xiangjai/article/details/44238005
			
4.编译FFmpeg
	4.0,我的实验。总结。实验及异常记录在[4.1.3]		
		实验发现，各种编译提示错误。但都没有按照脚本中prefix指定的存放目录来存放。
			ffmpeg与NDK版本要配合。因为不同ndk版本，采用编译器不同，低版本ndk_r17前采用gcc,高版本采用clang；所以照着网上的文章做当然编译不起来。
			参考：[4.1.4.5]中的文章得以理解。
		4.0.2，此时看看ffmpeg及NDK官网相关内容。
	4.1 Ubuntu 16.04编译FFmpeg
		4.1.1 Ubuntu 16.04编译FFmpeg 4.1
			https://blog.csdn.net/xucongyoushan/article/details/85132671
		4.1.2 Ubuntu16.04 环境下编译ffmpeg生成静态库和共享库
			https://blog.csdn.net/u010821666/article/details/74905654
			
			参考官方文档
			https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#RevertingChangesMadebyThisGuide
			
		4.1.3 参考：何俊林书籍：android音视频开发
			4.1.3.1 实验条件
				我在实验时，采用ubuntu16.4,nkd-r20,ffmpeg-4.2.4。
			4.1.3.2
				在编译前 ， 在源码中修改 FFmpeg 的 configure 文件。由于编译出来的动态库文件名 的版本
				号在 .so 之后（例如“ libavcodec.so.5 .100. l 勺，而 Android 平台不能识别这样的文件名 ，所以需
				要修改该文件名。在 configure 文件中找到下面儿行代码（ 在 3209-3212 行）：
			
				SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'
				LIB_INSTALL_EXTRA_CMD='$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'
				SLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'
				SLIB_INSTALL_LINKS='$(SLIBNAME)'
				
			4.1.3.3 
				／etc/profile.d 下创建配置脚本
				android_ndk_env.sh
				#!/bin/sh
				#ANDROID_NDK是ndk目录，替换为实际电脑上ndk路径。
				export ANDROID_NDK="/home/eink/soft_tools/ndk/android-ndk-r20" 
				export PATH=$ANDROID_NDK:$PATH
			
			4.1.3.4 
				配置ffmpeg编译脚本。
				ffmpeg_build_android.sh 
				注意书中，linux下编译时，脚本中--target-os=linux，应该为android.
			4.1.3.5 
				关于make: *** No rule to make target `clean'. Stop.这个莫名其妙问题的解决方法
				https://www.cnblogs.com/mmix2009/p/3191596.html
			
			4.1.3.6
				a. Unknown option "".
				See ./configure --help for available options.

			4.1.3.7
				b.
					/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc is unable to create an executable file. C compiler test failed.
					
					编译器不对，参考[4.1.4.5 ]
			4.1.3.8 
				参考[4.1.4.5 ]
				./android_ffmpeg_4.2.1_android_ndk_r20.sh: line 32: --cxx=/home/eink/soft_tools/ndk/android-ndk-r20/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++: No such file or directory
				./android_ffmpeg_4.2.1_android_ndk_r20.sh: line 34: --enable-cross-compile: command not found
				
				[4.1.4.5 ]配置作者可能漏加了。评论区有网友指出。
				--cc=$CC
				 --cxx=$CXX
				后面需要添加 \
				 --cc=$CC \
				 --cxx=$CXX \
		4.1.4 FFmpeg移植到android平台，通过ubuntu编译ffmpeg
			4.1.4.1 编译FFmpeg4.1.3并移植到Android app中使用（最详细的FFmpeg-Android编译教程） 
				https://blog.csdn.net/bobcat_kay/article/details/80889398
				
			4.1.4.2 ffmpeg开发之旅(5)：详解ffmpeg编译与在Android平台上的移植
				https://blog.csdn.net/liu3364575/article/details/78395494
			4.1.4.3 ubuntu14.04系统Android NDK编译ffmpeg遇到的问题 
				https://blog.csdn.net/ameyume/article/details/87283909
				
			4.1.4.4 Android使用FFmpeg(一)--编译ffmpeg
				系列博文
				https://www.jianshu.com/p/ca7ffd2e5e68
				
			4.1.4.5 FFMPEG-Android利用ndk(r20)编译最新版本ffmpeg4.2.1
				https://juejin.cn/post/6844903945496690696 
				对于build_android.sh文件的说明
				为什么新版本的ffmpeg搭配新版本的ndk编译很容易出错呢？其实关键点主要还是新旧版本ndk中的交叉编译工具不一样导致的。比如旧版本（r17及之前）的ndk中的编译器用的是gcc，而网上大部分的同类文章中用的也是gcc，而新版本的ndk文件已经弃用gcc编译器改用clang了，所以照着网上的文章做当然编译不起来）
				
	4.2 windows下编译FFmpeg
		4.1 待实验。
			
			
5. FFmpeg 开源项目分析
	
	5.1 FFmpeg 开源项目分析
		系列博文。
		https://www.jianshu.com/p/a7240d3fffd4    
		含有ffmpeg多平台编译配置。使用函数传参指定cpu类型。
		
6. ffmpeg 安装及使用过程解析
	6.1 ffmpeg Windows下的安装及使用过程解析
		https://www.cnblogs.com/pengpengboshi/p/12627715.html
		
		6.1.1 下载安装，配置环境变量见文档
			windows下配置环境变量：
			如ffmpeg-4.3.1。
			定义系统变量名称FFMPEG_HOME 为解压路径:: D:\juying\java2\ffmpeg-4.3.1-2020-11-19-full_build
			将%FFMPEG_HOME%\bin追加到系统变量path中。前后添加英文分号。
			
		6.1.2 使用过程记录见 [7]
	6.2 ffmpeg linux下的安装及使用过程解析
7. ffmpeg使用过程记录见 [7]	
	7.0 详细的使用说明（英文）：
		http://ffmpeg.org/ffplay.html
		http://ffmpeg.org/ffprobe.html
		
		FFMPEG 参数详细说明
		https://blog.csdn.net/z2066411585/article/details/81237583
	
	7.1 ffmpeg Windows下使用过程解析
		https://www.cnblogs.com/pengpengboshi/p/12627715.html
	
		7.1.1 视频格式转换：ffmpeg -i num.mp4 -codec copy num2.avi

			将num.mp4复制并转换为num2.avi
			-i后表示要进行操作的文件
		7.1.2 gif制作：ffmpeg -i num.mp4 -vframes 20 -y -f gif num3.gif

			将num.mp4的前20帧制作为gif并命名为num3
		7.1.3 视频截取：ffmpeg -i num.mp4 -ss 0 -t 3 -codec copy cut1.mp4

			-ss后数字表示截取时刻，-t后数字表示截取时长

			截取视频某一时刻为图片：ffmpeg -i num.mp4 -y -f image2 -ss 2 -t 0.001 -s 400x300 pic.jpg

			将2s时刻截取为400x300大小的名为pic.jpg的图片（-ss后的数字为截取时刻）
		7.1.4 每秒截取一张图片：ffmpeg -i num.mp4 -r 1 image%d.jpg

			将视频num.mp4进行每秒截取一张图片，并命名为imagei.jpg（i=1，2，3...）

			注：-r后的数字表示每隔多久截取一张
			
			//验证时，并不正确。
		7.1.5 使用ffmpeg调整图像大小
			https://blog.csdn.net/yz099/article/details/108082980
			
			指定长宽：
			ffmpeg -i input.jpg -vf scale=320:240 output_320x240.png

			指定长，高度按比例缩放：
			ffmpeg -i input.jpg -vf scale=320:-1 output_320x240.png

			缩放为之前的两倍：
			ffmpeg -i input.jpg -vf scale=iw*2:ih input_double_width.png

			缩放为之前的二分之一：
			ffmpeg -i input.jpg -vf scale=iw*.5:ih*.5 input_half_size.png
			ffmpeg -i input.jpg -vf scale=iw/2:ih/2 input_half_size.png

			参考案例：https://trac.ffmpeg.org/wiki/Scaling
				https://trac.ffmpeg.org/wiki
				
8. FFmpeg在基于Android上有哪些应用。
	8.1 FFmpeg在基于Android的楼宇可视对讲程序中的应用 
		http://www.fx361.com/page/2017/0729/2117898.shtml
		
		ffmpeg在楼宇可视对讲系统中的应用
		【知网空间】，及同类文献
		https://www.cnki.com.cn/Article/CJFDTotal-JCFH201402012.htm
		
		文章中有一些书籍和文献可以参考
	8.2 Android基于Ffmpeg 的软编软解的可视对讲 
		https://my.oschina.net/zengliubao/blog/305890
		1.没有回音消除。直接上源码（应用层）！
		2.代码简要说明：

		 * 代码是在手机上运行的，也包含一个平板上的apk(平板的ui好看点但是bug多，先开启wifi)
		 * 对讲的两个设备应在同一个WLAN中。输入Ip后点击开始了其他的看代码吧！
		3、代码下载地址：

			http://download.csdn.net/detail/isnowflake/7807157
			
			调试代码移植到工程AndroidJavaDemoTestForAS中的module:videoTalk0823,as开发
			因原有项目是ecipse adt project ,as导入时以module方式并选择这个类型导入。
	 
	8.3 Android系统下基于FFmpeg框架的多媒体播放器研究
		【及同类文献】
		https://cdmd.cnki.com.cn/Article/CDMD-11415-1016068240.htm  
		
		Android多媒体平台下基于FFMPEG的音视频处理方案研究
			https://xueshu.baidu.com/usercenter/paper/show?paperid=8dd38ffe68a0a9c817a343704cba712e&site=xueshu_se
	8.4 基于Android平台的无线视频监控系统设计与研究
		https://xueshu.baidu.com/usercenter/paper/show?paperid=1g2e0tr09d0t08f0g76c0090rk625442
		
		http://d.wanfangdata.com.cn/thesis/D01635927
		
		赵红超 - 河北工业大学
		可以实际应用。
		标题英文翻译：Design and research of wireless video surveillance system based on Android platform
		
		英文搜索：
		Design of a home surveillance system based on the android platform
			https://sci-hub.st/10.1109/FSKD.2015.7382275
		
	8.5 Design and implementation of video monitoring system based on Android
		即：基于Android的视频监控系统设计与实现
		已下载
	8.6 Android录屏并利用FFmpeg转换成gif（一）录屏
		https://blog.csdn.net/minghuang2017/article/details/79050563
		
		8.6.1 Android录屏并利用FFmpeg转换成gif（二）交叉编译FFmpeg源码
			https://blog.csdn.net/MingHuang2017/article/details/79112682 
			
			开发环境：

			操作系统：Ubuntu 16.04 LTS
			FFmpeg源码：ffmpeg-3.4.1
			NDK版本：android-ndk-r15c
			
			假设既不考虑交叉编译，也不考虑裁剪，编译FFmpeg
			~$ ./configure
			~$ sudo make
			~$ sudo make install
			
			FFmpeg所支持的所有编码器，解码器等可以用 --list-decoders , --list-encoders等参数来查看，非常多，一般是根据需要选择几种。
			
				注意：验证发现，在ffmpeg4.3.1 中。使用以上方式提示无效命令。
				使用ffmpeg -h 
				-decoders           show available decoders
				-encoders           show available encoders
			二、交叉编译FFmpeg
				记录一些需要注意的：
				--target-os=OS 编译目标操作系统，我们的目标是android系统，使用linux内核，要指定为linux
				
		8.6.2 Android录屏并利用FFmpeg转换成gif（三） 在Android中使用ffmpeg命令
			https://blog.csdn.net/MingHuang2017/article/details/79186513
			引用文章：：
				Android 集成 FFmpeg (二) 以命令方式调用 FFmpeg
				王英豪
					https://www.jianshu.com/p/6e556d336b1d#comment-18266369
				
				Android 集成 FFmpeg (一) 基础知识及简单调用
					https://www.jianshu.com/p/f23c62820b79
			android studio会自动把编译好的so文件存放在app/build/intermediates/cmake/debug/obj/armeabi等几个目录下
			
			关联文章：费了这么大劲就是为了这个libffmpeg.so文件，其实编译这个文件也可以不在android工程中进行，因为实际上我们的工程只要引用这几个so包而已，至于怎么编译这些so包并不在本工程的职责范围内。
			要在工程外编译请参考：https://blog.csdn.net/MingHuang2017/article/details/79000345
			
			
9. ffmpeg超详细综合教程
	【ffmpeg超详细综合教程一】
	http://www.360doc.com/content/16/0711/20/9008018_574787603.shtml 
	【ffmpeg超详细综合教程二】
	http://www.360doc.com/content/16/0304/20/9008018_539447805.shtml
	还有一些。以及源码分析等。具体查看博主资源。
	
	【或者csdn系列教程】
	ffmpeg超详细综合教程（二）——为直播流添加滤镜 
	https://blog.csdn.net/wh8_2011/article/details/73506128 