0. 资源
	0.1 参见 Linux 手册
		http://linux.die.net/man/
		
		{如：参见 Linux 手册页中的 epoll(4)： http://linux.die.net/man/4/epoll}
	0.2	ubuntu与centos对比
			https://www.linuxprobe.com/ubuntu-comparison-centos.html 
		0.2.2 CentOS与Ubuntu命令中的不同之处 
			https://blog.csdn.net/kwame211/article/details/78533170 
					
1、linux内核的熵池 
	1.1、linux内核的熵池 
		https://www.cnblogs.com/yinheyi/p/5973584.html
 
2.Linux的 .ko,.a、.so和.o文件及链接时的命名 
	2.1、Linux的.a、.so和.o文件及链接时的命名 
		https://www.cnblogs.com/wangshaowei/p/11285341.html
		
		2.1.1 linux .o,.a,.so
			.o,是目标文件,相当于windows中的.obj文件 

		　　.so 为共享库,是shared object,用于动态连接的,相当于windows下的dll 

		　　.a为静态库,是好多个.o合在一起,用于静态连接 
	2.2 Linux下的.ko文件 
		
		2.2.1 https://blog.csdn.net/qq_24118527/article/details/78569578
		
			.so 文件是动态链接库文件，相当于 win下的 .dll 文件。

			.ko 文件是内核模块文件，是内核加载的某个模块，一般是驱动程序。
			.ko文件是kernel object文件（内核模块），该文件的意义就是把内核的一些功能移动到内核外边， 需要的时候插入内核，不需要时卸载。
		
		2.2.2 Linux下编写和加载 .ko 文件（驱动模块文件） 
			https://blog.csdn.net/qq_38880380/article/details/79227760.
	
3、.bash_profile和.bashrc的区别 
	3.1、.bash_profile和.bashrc的区别 
		https://blog.csdn.net/CHS007chs/article/details/86663436
		
4、linux export 的作用 
	4.1、linux export 的作用 
		https://blog.csdn.net/bailyzheng/article/details/7488769?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
		
5、什么是Linux Shell？ 
	5.1、什么是Linux Shell？ 
		https://blog.csdn.net/zhydream77/article/details/80079319
	5.2、Linux中的shell到底是什么？ 
		https://www.cnblogs.com/tjudzj/p/7088543.html
		
	5.3 linux下执行shell异常 
		/bin/sh^M: bad interpreter: No such file or directory 异常
			https://blog.csdn.net/carolzhang8406/article/details/6104361
			分析：这是不同系统编码格式引起的：在 windows系统中编辑的 .sh文件可能有不可见字符，所以在 Linux系统下执行会报以上异常信息。
			
			解决： 1）在 windows下转换：
			利用一些编辑器如 UltraEdit或 EditPlus等工具先将脚本编码转换，再放到 Linux中执行。转换方式如下（ UltraEdit）： File-->Conversions-->DOS->UNIX即可。
				2 ）也可在 Linux中转换：
			首先要确保文件有可执行权限
			#sh>chmod a+x filename

			然后修改文件格式
			#sh>vi filename

			利用如下命令查看文件格式
			:set ff 或 :set fileformat

			可以看到如下信息
			fileformat=dos 或 fileformat=unix

			利用如下命令修改文件格式
			:set ff=unix 或 :set fileformat=unix
			
	5.4 详解shell中source、sh、bash、./执行脚本的区别
		https://www.jb51.net/article/128918.htm
		结论一: ./*.sh的执行方式等价于sh ./*.sh或者bash ./*.sh，此三种执行脚本的方式都是重新启动一个子shell,在子shell中执行此脚本。

		结论二: .source ./*.sh和 . ./*.sh的执行方式是等价的，即两种执行方式都是在当前shell进程中执行此脚本，而不是重新启动一个shell 而在子shell进程中执行此脚本。

		验证依据：没有被export导出的变量（即非环境变量）是不能被子shell继承的
		对应验证调试项目位置：android-knowledge-principle-interview\35-linux-mudule\shell_project\export_test_project
	5.5 linux下查看当前shell方法。
		含有查看当前使用的 shell ，查看当前进程
		https://www.cnblogs.com/vigarbuaa/archive/2004/01/13/2667098.html
		
6. i386 和amd64 的意思 
	6.1  i386 和amd64 的意思 
		https://zhidao.baidu.com/question/70209686.html
		
	6.2 64位版本为什么叫amd64，而不是intel64 
		https://baijiahao.baidu.com/s?id=1614402461283928635&wfr=spider&for=pc
	6.3 amd64
		https://baike.baidu.com/item/amd64/7015806?fr=aladdin
		
7. gcc 
	7.1 gcc 
		https://baike.baidu.com/item/gcc/17570?fr=aladdin
		
	7.2 Linux下gcc命令详解 
		https://blog.csdn.net/ENSHADOWER/article/details/82951131?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.nonecase
	7.3 Linux学习（C语言学习之Gcc）
		https://blog.csdn.net/weixin_42994525/article/details/82930601
		
		GCC详解
			https://blog.csdn.net/qq_35144795/article/details/77580913
	7.4 gcc -static 命令 
		https://blog.csdn.net/newchenxf/article/details/51743181
		当gcc -static 用于编译一个程序时，会使此程序静态编译（把动态库的函数和所依赖的任何的东西，都编译进本程序），编译好后，文件会非常大，但是，运行时就不需要依赖任何动态库。
8. g++ 
	8.1 g++ 
		https://baike.baidu.com/item/g%2B%2B
		
		
9. GNU bison 
	9.1 GNU bison 
		https://baike.baidu.com/item/GNU%20bison/2622935?fr=aladdin
		
10. ncurses 
	10.1 ncurses 
		https://baike.baidu.com/item/ncurses/393121?fr=aladdin
		
11. gperf
	11.1 gperf 
		http://www.gnu.org/software/gperf/ 
	
	11.2 gperftools 
		动态执行流程分析和性能瓶颈分析的利器——gperftools的Cpu Profiler
		https://blog.csdn.net/breaksoftware/article/details/81315729 
		
12 kernel 中 sscanf和sprintf()函数使用说明
	12.1 kernel 中 sscanf和sprintf()函数使用说明 
		https://blog.csdn.net/zhangzhi123456789/article/details/47748081
		
13. 一个串口和485与232选择通信方法 
	13.1 一个串口和485与232选择通信方法
		https://blog.csdn.net/qq_35570735/article/details/81352011
		
14. linux信号量睡眠锁，与普通的Thread.sleep()区别;

15. Linux-DTS基础 
	15.1 Linux-DTS基础 
		https://blog.csdn.net/qq_33003441/article/details/84257342
		
	15.2 linux DTS介绍 
		https://www.cnblogs.com/linux-37ge/p/11135617.html
		
		1.3. 相关名称缩写

        <1>. DT   :Device Tree

        <2>. FDT : Flattened Device Tree

        <3>. OF   :Open Firmware

        <4>. DTS :device tree source

        <5>. DTSI:device tree source include

        <6>. DTB :device tree blob

        <7>. DTC :device tree compiler
	15.3 设备树学习（二、设备树dts/dtsi格式）
		 https://blog.csdn.net/qq_16777851/article/details/87291146 
16. linux系统中misc子系统 
	16.1 linux系统中misc子系统 
		https://blog.csdn.net/wang_zheng_kai/article/details/42716403
		在linux系统中什么是misc？

		在研究摄像头驱动的时候，发现摄像头驱动的路径为：/driver/misc/jz_cim/文件目录下，经过查找结果如下：

		杂项设备（misc device）

		杂项设备也是嵌入式系统中用得比较多的一种设备驱动。在 Linux 内核的include/linux目录下有miscdevice.h文件，要把自己定义的misc device从设备定义在这里。其实是因为这些字符设备不符合预先确定的字符设备范畴，所有这些设备采用主编号10 ，一起归于misc 		device，其实misc_register就是用主标号10调用register_chrdev()的，只不过misc是将一些字符设备存放在misc类中。换句话说，misc设备其实也就是特殊的字符设备。
			
17. Linux中Uboot详解 
	17.1 Linux中Uboot详解 
		[yyfwd]
		https://blog.csdn.net/yyfwd/article/details/51015467
		
	17.2 Uboot1之什么是uboot？ 
		https://blog.csdn.net/wangdapao12138/article/details/79561626?utm_medium=distribute.pc_relevant_right.none-task-blog-BlogCommendFromBaidu-20.nonecase&depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-BlogCommendFromBaidu-20.nonecase
	17.2 bootloader 与 uboot的区别 
		https://blog.csdn.net/weixin_41632560/article/details/87608972
		
		BootLoader是嵌入式设备中用来启动操作系统内核的一段程序。 
		uboot（universal bootloader）是一种可以用于多种嵌入式CPU的BootLoader程序，换言之，uboot是bootloader的一个子集。 
		uboot的核心作用就是启动操作系统内核，uboot的本质就是一段裸机程序。
		
	17.3 【整理】BIOS、BootLoader、uboot对比 
		https://blog.csdn.net/conowen/article/details/7253620/?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2
18. linux--Makefile
	内容比较多，单独出一个文件【35-07-Makefile-record.txt】
	18.1 linux--Makefile概述 
		https://blog.csdn.net/qq_38880380/article/details/79860541
		
	18.2 linux--Makefile学习资料汇总以及编译工具make、gmake、cmake、nmake和Dmake的区别 
		https://blog.csdn.net/qq_38880380/article/details/79860538?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158987348419195162540691%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=158987348419195162540691&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-1-79860538.nonecase&utm_term=%E3%80%8AMakefile%E3%80%8B+%E4%BD%9C%E8%80%85+%E9%99%88%E7%9A%93%EF%BC%8C%E6%95%B4%E7%90%86+%E7%A5%9D%E5%86%AC%E5%8D%8E
	18.3 linux和Android的Makefile和android.mk 
		https://www.cnblogs.com/maogefff/p/7910441.html#_label1_0
		
		含有小demo，跟着调试。
19 __attribute__ 机制详解 
	19.1 __attribute__ 机制详解
		https://blog.csdn.net/weaiken/article/details/88085360?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase
		
		https://blog.csdn.net/iteye_14514/article/details/81614037
		
20 占空比 
	占空比是指在一个脉冲循环内，通电时间相对于总时间所占的比例。占空比(Duty Ratio)在电信领域中有如下含义：例如：脉冲宽度1μs，信号周期4μs的脉冲序列占空比为0.25。 [1] 
	https://baike.baidu.com/item/%E5%8D%A0%E7%A9%BA%E6%AF%94/3652044?fr=aladdin
	
	外文名Duty Ratio，Duty Cycle
	
21 正交概念
	21.1 正交概念
		https://blog.csdn.net/weixin_38130913/article/details/99798688
		
22,迅为linux系统编程
	
	chapter17
		jobs
		jobs;sleep 3;jobs
		time ./execute-file //detect execute speed.
				
		./execute-file & //后台运行 + &
		
		阻塞是因为函数：open(fifo_name, open_mode);
		参考：linux管道pipe详解
			https://blog.csdn.net/qq_42914528/article/details/82023408
			
			Linux有名管道（FIFO）的阻塞和非阻塞读写
				https://blog.csdn.net/u014285517/article/details/50479504
		17.3 消息队列
			查看和删除消息队列消息
			查看： ipcs -q

			删除：ipcrm -q msgid 
		
23 linux部分函数详解
	23.1 Linux中fork()函数详解
		https://blog.csdn.net/kxjrzyk/article/details/81603049
		fork入门，进阶，高阶。
		
24 linux 日志
	24.1 Linux中记录终端输出到文本文件
		https://blog.csdn.net/tengh/article/details/41823883
		
		b,将linux编译过程中的日志输出到文件
		https://blog.csdn.net/qq_25623355/article/details/89760962
		
	24.2 Ubuntu查看和写入系统日志
		https://www.cnblogs.com/EasonJim/p/7189491.html
		
		dmesg的命令显示Linux内核的消息缓冲器，其被存储在存储器中
		常用日志目录代表的意思
22 数据类型
	22.1 Linux基本数据类型大小——int,char,long int,long long int
		https://www.cnblogs.com/jikexianfeng/p/5792057.html
		
23 linux, configure --prefix=/有什么用
	23.1 linux, configure --prefix=/有什么用
		https://zhidao.baidu.com/question/535223201.html
		
		Configure是一个可执行脚本，它有很多选项，在待安装的源码路径下使用命令./configure–help输出详细的选项列表。
		其中，prefix选项是配置安装的路径，如果不配置该选项，安装后可执行文件默认放在/usr/local/bin，
		库文件默认放在/usr/local/lib， 配置文件默认放在/usr/local/etc，其它的资源文件放在/usr/local/share，比较凌乱。

		如果配置prefix，如：
		./configure --prefix=/usr/local/test可以把所有资源文件放在/usr/local/test的路径中，不会杂乱。
24 cpu
	24.1 NEON技术粗浅认识 
		https://blog.csdn.net/heliangbin87/article/details/79581113/ 
		
25 TCP的socket的服务器端和客户端实例(linux下) 
	https://blog.csdn.net/ma451152002/article/details/9066953  
	1、服务器端步骤：

	socket()->bind()->listen()->accept()->read()->write()->close()

	2、客户端步骤：

	socket()->connect()->write()->read()->close()
	
	测试程序：见播客文中。
26 chroot
	26.1 chroot的作用及详解
		https://blog.csdn.net/hao707822882/article/details/39500549  
27 Linux ELF文件格式分析
	https://blog.csdn.net/xj178926426/article/details/72825630 
28 Linux查看CPU信息（CPU个数、核心数、CPU使用率、运行位数）
	
	28.1 https://blog.csdn.net/plpldog/article/details/122682418
	{
		1、查看cpu的方法

		cat /proc/cpuinfo 

		2、查看内存使用

		free -m
		3、查看cpu和内存的使用率

		在输入 top 命令之后，回车
			{各行参数信息，含义见博客}

		4、查看硬盘大小

		df -h
	}
	
	28.2 linux怎么查看有几个cpu
		https://www.php.cn/linux-489704.html
	{
		1、查看物理CPU的个数

		cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc -l

		2、查看逻辑CPU的个数(线程数)

		cat /proc/cpuinfo |grep "processor"|wc -l

		3、查看CPU是几核

		cat /proc/cpuinfo |grep "cores"|uniq

		4、查看CPU的主频

		cat /proc/cpuinfo |grep MHz|uniq

		扩展知识：

		uname -a

		Linux euis1 2.6.9-55.ELsmp #1 SMP Fri Apr 20 17:03:35 EDT 2007 i686 i686 i386 GNU/Linux

		(查看当前操作系统内核信息)

		cat /etc/issue | grep Linux

		Red Hat Enterprise Linux AS release 4 (Nahant Update 5)

		(查看当前操作系统发行版信息)

		cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c

			  8  Intel(R) Xeon(R) CPU            E5410   @ 2.33GHz

		(看到有8个逻辑CPU, 也知道了CPU型号)

		cat /proc/cpuinfo | grep physical | uniq -c

			  4 physical id      : 0

			  4 physical id      : 1

		(说明实际上是两颗4核的CPU)

		getconf LONG_BIT
		32

		(说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit)

		cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l

		8

		(结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)
	}