1. Ubuntu下编译第一个C程序的成功运行 
	https://www.linuxidc.com/Linux/2014-05/101844.htm
	
	1.1.编译hello.c

		在终端执行  g++ hello.c -o hello 编译。

	1.2 运行程序hello

		./hello
	1.3 运行程序时传递参数。
		./hello 10 20
	1.4 ldd 查看程序运行依赖哪些库。
	
	1.5 添加动态库。
		sudo vim /etc/ld.so.conf 
		添加动态库位置目录 /home/eink/test_project/c_project/calculator
		使修改生效。
		sudo ldconfig -v
	
	1.6 生成连接块文件 
		ln -s libmycalc.so.10 libmycal.so

	
2. Ubuntu下编译C程序的详解 
	2.1
		https://www.linuxidc.com/Linux/2012-11/73360.htm
		
		1、C语言中的各种后缀名代表的意思：

		.a文件代表的是静态库

		.c代表c源代码

		.h代表c源代码头文件

		.i代表的是c源代码（这是被预处理过后的结果）

		.o对象文件

		.s汇编语言的代码

		.so动态库

		2、c语言程序从源代码到生成可执行文件的过程：c程序源代码（.c文件）-----（1）-----不用预处理的c程序源代码（.i文件）----（2）---汇编语言文件（.s文件）------（3）-----机器语言文件（.o文件）-----（4）------可执行文件

		其中的每个过程的意义如下：过程（1）是预处理阶段，这个阶段主要是根据#开头的命令修改c源文件，主要的工作是，比如#include<stdio.h>命令告诉预处理器读取系统文件stdio.h的内容并且把相应的内容插入到源代码中去，就形成了.i文件。

		过程（2）：这个过程是编译阶段，编译器将文本文件.i文件翻译成文本文件.s文件。这个文件是与源文件等效的汇编语言程序。

		过程（3）：这个过程主要是汇编阶段，在这个阶段中汇编器将.s文件编译成机器语言指令就是这里的.o文件。

		过程（4）：这个过程是链接阶段，这个阶段主要就是将程序中的一些库函数用链接器给进行链接（链接过程包括静态链接和动态链接，在这里就不细说了）。

		3、讲一下Ubuntu下面c源程序的各种文件的获得：（比如有一个源程序为hello.c文件）

		（1）、预处理阶段
			如果要执行预处理的话，使用的编译代码就是加上参数-E来进行编译，比如我们这里要生成hello.i文件，则我们编译代码是：gcc -E hello.c -o hello.i。//-E 的作用是让 gcc 在预处理结束后停止编译
			
		（2）、编译阶段
			如果要生成汇编代码，使用的编译代码就是加上参数-S进行编译，比如我们要生成hello.s文件，则我们使用的编译代码是：gcc -S hello.c -o hello.s。
			

		（3）、汇编阶段
			为了将源程序编译成.o文件的命令是指定参数-c来进行编译。例如这里要生成hello.o文件的编译为：gcc -c hello.c -o hello.o。
			汇编阶段把 .S 文件翻译成二进制机器指令文件 .o ，这个阶段接收.c ,.i ,.s 的文件都没有问题。

			下面我们通过以下命令生成二进制机器指令文件 .o 文件:

			gcc -c test.s -o test.o

		（4）链接阶段
			接阶段，链接的是函数库。
			为了获得可执行文件可以使用命令：gcc hello.c -o a.	a其中-o是用来指定所生成的可执行程序的文件名，比如这里生成的文件名是a。

		（5）、如果程序中用到了不是gcc默认的库函数的时候，比如程序中用到了math.h这个头文件。这个头文件不是gcc默认的头文件，所以在编译的时候要加入-l库的首字母来进行编译。比如这里是：gcc hello.c -lm -o a.
		
	2.2 在linux下使用gcc/g++编译多个.h .c 文件
		https://www.jianshu.com/p/e5c6a255076b
		（1）
			main.cpp 文件是包含main函数的文件，在myinclude的文件下，包含了myhead.h 和 myhead.cpp 文件。分别是头文件的定义和实现。
		（2）
			zhaozheng@ubuntu:~/code/c++/test_compile/src$ g++ main.cpp -o main
			main.cpp:2:20: fatal error: myhead.h: No such file or directory
			compilation terminated.
			
			直接编译的结果就是报错了，错误的原因是 默认的include目录下面没有 myhead.h 头文件。
		（3）
			那么通过 -I 选项 链接上去。重新编译
			zhaozheng@ubuntu:~/code/c++/test_compile/src$ g++ main.cpp -o main -I ../myinclude/
			/tmp/ccH3BlLo.o: In function `main':
			main.cpp:(.text+0x3e): undefined reference to `sum(int, int)'
			collect2: error: ld returned 1 exit status
			
			有报错，错误的原因是头文件虽然找到了，但是没有提示错误，没有定义sum函数。sum函数是在myhead.cpp文件上面定义的。也就是需要把myhead.cpp文件编译一下。
			zhaozheng@ubuntu:~/code/c++/test_compile/myinclude$ g++ -c myhead.cpp -o myhead.o
		（4）再一次的编译：
			zhaozheng@ubuntu:~/code/c++/test_compile/src$ g++ main.cpp -o main -I ../myinclude/    ../myinclude/myhead.o
			
		（5） g++ gcc
			g++ -c calc.c -o calc.o
			calc.c: In function ‘int main(int, char**)’:
			calc.c:18: error: ‘add’ was not declared in this scope
			
			使用gcc 就正常编译。

	2.3 使用Makefile配置文件编译。
		
3. gcc -lpthread 干什么用 
	3.1 gcc -lpthread 干什么用 
		http://blog.chinaunix.net/uid-26457514-id-4941671.html