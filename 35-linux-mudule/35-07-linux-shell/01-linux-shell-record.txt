01 shell教程
	01.1 https://www.runoob.com/linux/linux-shell.html 
	
1.shell中echo命令详解 
	1.1、shell中echo命令详解
		https://blog.csdn.net/vip_wangsai/article/details/72592649
2. shell中expr的使用介绍 
	2.1 shell中expr的使用介绍 
	
		https://blog.csdn.net/hu_wen/article/details/52930806
		
3.shell菜鸟教程记录。
	3.1 运行 Shell 脚本有两种方法：
		1、作为可执行程序
			将代码保存为 test.sh，并 cd 到相应目录：
			注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。
		
		2、作为解释器参数
			这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如:
			/bin/sh test.sh
	3.2 变量
		3.2.1 使用变量
			your_name="qinjx"
			echo $your_name
			echo ${your_name}
			使用一个定义过的变量，只要在变量名前面加美元符号即可
			
			for skill in Ada Coffe Action Java; do
				echo "I am good at ${skill}Script"
			done
			
			如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。

			推荐给所有变量加上花括号，这是个好的编程习惯。
		3.2.2 只读变量 
			使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
			myUrl="https://www.google.com"
			readonly myUrl
		3.2.3 删除变量 
			unset variable_name
			变量被删除后不能再次使用。unset 命令不能删除只读变量。
			myUrl="https://www.runoob.com"
			unset myUrl
			echo $myUrl
			以上实例执行将没有任何输出。
		3.2.4 Shell 字符串-单引号
			str='this is a string'
			单引号字符串的限制：

				单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
				单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
		3.2.5 双引号
			your_name='runoob'
			str="Hello, I know you are \"$your_name\"! \n"
			echo -e $str
			输出结果为：Hello, I know you are "runoob"! 
			
			双引号的优点：
				双引号里可以有变量
				双引号里可以出现转义字符
		3.2.6 拼接字符串
			your_name="runoob"
			# 使用双引号拼接
			greeting="hello, "$your_name" !"
			greeting_1="hello, ${your_name} !"
			echo $greeting  $greeting_1
			# 使用单引号拼接
			greeting_2='hello, '$your_name' !'
			greeting_3='hello, ${your_name} !'
			echo $greeting_2  $greeting_3
			
			输出结果为：
				hello, runoob ! hello, runoob !
				hello, runoob ! hello, ${your_name} !
				
		3.2.7 获取字符串长度
			string="abcd"
			echo ${#string} #输出 4
			
		3.2.8 提取子字符串
			以下实例从字符串第 2 个字符开始截取 4 个字符：
			string="runoob is a great site"
			echo ${string:1:4} # 输出 unoo
			
			注意：第一个字符的索引值为 0。
		3.2.9 查找子字符串
			查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：
			string="runoob is a great site"
			echo `expr index "$string" io`  # 输出 4 //位置不同于索引。
			
			注意： 以上脚本中 ` 是反引号，而不是单引号 '，不要看错了哦。
		3.2.10 定义数组
			bash支持一维数组（不支持多维数组），并且没有限定数组的大小。

			类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。
			在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
			数组名=(值1 值2 ... 值n)
			array_name=(value0 value1 value2 value3)
			
			array_name=(
				value0
				value1
				value2
				value3
				)
			还可以单独定义数组的各个分量：

			array_name[0]=value0
			array_name[1]=value1
			array_name[n]=valuen
		3.2.11 读取数组
			读取数组元素值的一般格式是：

			${数组名[下标]}
			例如：
			valuen=${array_name[n]}
			
			使用 @ 符号可以获取数组中的所有元素，例如：

			echo ${array_name[@]}
			
			实例：
			#!/bin/bash
			# author:菜鸟教程
			# url:www.runoob.com

			my_array=(A B "C" D)

			echo "第一个元素为: ${my_array[0]}"
			echo "第二个元素为: ${my_array[1]}"
			echo "第三个元素为: ${my_array[2]}"
			echo "第四个元素为: ${my_array[3]}"
			
		3.2.12 获取数组的长度
			获取数组长度的方法与获取字符串长度的方法相同，例如：
			
			# 取得数组元素的个数
			length=${#array_name[@]}
			# 或者
			length=${#array_name[*]}
			# 取得数组单个元素的长度
			lengthn=${#array_name[n]}
			
			
		3.2.13 获取数组中的所有元素
				使用@ 或 * 可以获取数组中的所有元素，例如：

				#!/bin/bash
				# author:菜鸟教程
				# url:www.runoob.com

				my_array[0]=A
				my_array[1]=B
				my_array[2]=C
				my_array[3]=D

				echo "数组的元素为: ${my_array[*]}"
				echo "数组的元素为: ${my_array[@]}"
			执行脚本，输出结果如下所示：

				$ chmod +x test.sh 
				$ ./test.sh
				数组的元素为: A B C D
				数组的元素为: A B C D
			
		3.2.14 Shell 注释
			以 # 开头的行就是注释，会被解释器忽略。

			通过每一行加一个 # 号设置多行注释，
			
			多行注释
			多行注释还可以使用以下格式：

			:<<EOF
			注释内容...
			注释内容...
			注释内容...
			EOF
			EOF 也可以使用其他符号:

			:<<'
			注释内容...
			注释内容...
			注释内容...
			'

			:<<!
			注释内容...
			注释内容...
			注释内容...
			!
	3.3 Shell 传递参数
		我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
		
		实例
		以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）：
		
		#!/bin/bash
		# author:菜鸟教程
		# url:www.runoob.com

		echo "Shell 传递参数实例！";
		echo "执行的文件名：$0";
		echo "第一个参数为：$1";
		echo "第二个参数为：$2";
		
		$ chmod +x test.sh 
		$ ./test.sh 1 2 3
		
		
		另外，还有几个特殊字符用来处理参数：

		参数处理	说明
		$#	传递到脚本的参数个数
		$*	以一个单字符串显示所有向脚本传递的参数。
		如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
		$$	脚本运行的当前进程ID号
		$!	后台运行的最后一个进程的ID号
		$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
		如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
		$-	显示Shell使用的当前选项，与set命令功能相同。
		$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
		
		$* 与 $@ 区别：

		相同点：都是引用所有参数。
		不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。
		
		#!/bin/bash
		# author:菜鸟教程
		# url:www.runoob.com

		echo "-- \$* 演示 ---"
		for i in "$*"; do
			echo $i
		done

		echo "-- \$@ 演示 ---"
		for i in "$@"; do
			echo $i
		done
		
		执行脚本，输出结果如下所示：
		$ chmod +x test.sh 
		$ ./test.sh 1 2 3
		-- $* 演示 ---
		1 2 3
		-- $@ 演示 ---
		1
		2
		3
	3.4 Shell 基本运算符 
		3.4.1 Shell 和其他编程语言一样，支持多种运算符，包括：

			算数运算符
			关系运算符
			布尔运算符
			字符串运算符
			文件测试运算符
			原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。

			expr 是一款表达式计算工具，使用它能完成表达式的求值操作。

			例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ')：
			#!/bin/bash
			val=`expr 2 + 2`
			echo "两数之和为 : $val"
			
			执行脚本，输出结果如下所示：
			两数之和为 : 4
			
			两点注意：
			表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
			完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。
		3.4.2 算术运算符
			注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。
			注意：
				乘号(*)前边必须加反斜杠(\)才能实现乘法运算；
				if...then...fi 是条件语句，后续将会讲解。
				
		3.4.3 关系运算符 
			关系运算符只支持数字，不支持字符串，除非字符串的值是数字。
			https://www.runoob.com/linux/linux-shell-basic-operators.html
			
		3.4.4 布尔运算符
			!	非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
			-o	或运算，有一个表达式为 true 则返回 true。	[ $a -lt 20 -o $b -gt 100 ] 返回 true。
			-a	与运算，两个表达式都为 true 才返回 true。	[ $a -lt 20 -a $b -gt 100 ] 返回 false。
			
		3.4.5 逻辑运算符 
			&&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false
			||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true
			注意：逻辑运算符，需要嵌套两层[]
			
			android\android&knowledge&principle&interview\35-linux-mudule\shell_project\shell_base_test_project
			
		3.4.6 字符串运算符
			=	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
			!=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
			-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
			-n	检测字符串长度是否不为 0，不为 0 返回 true。	[ -n "$a" ] 返回 true。
			$	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。
			
			比较两个字符串是否相等。发现有的写法为：if [ $a = $b ],而有的写法为：if $a = $b 啥区别？还是不同版本问题？
			if [ $a = $b ]
			then
			   echo "$a = $b : a 等于 b"
			else
			   echo "$a = $b: a 不等于 b"
			fi
		3.4.7 文件测试运算符
			https://www.runoob.com/linux/linux-shell-basic-operators.html
			文件测试运算符用于检测 Unix 文件的各种属性。
			其他检查符：

			-S: 判断某文件是否 socket。
			-L: 检测文件是否存在并且是一个符号链接。
	3.5 Shell echo命令 
		3.5.1.显示普通字符串:
			echo "It is a test"
			
			这里的双引号完全可以省略，以下命令与上面实例效果一致：
			echo It is a test
		3.5.2 2.显示转义字符
			echo "\"It is a test\""
			结果将是:

			"It is a test"
			同样，双引号也可以省略
		3.5.3 显示变量
			read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量

			#!/bin/sh
			read name 
			echo "$name It is a test"
			以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:

			[root@www ~]# sh test.sh
			OK                     #标准输入
			OK It is a test        #输出
			
		3.5.4 显示换行
			echo -e "OK! \n" # -e 开启转义
			echo "It is a test"
			输出结果：

			OK!

			It is a test
			
		3.5.5 显示不换行
			#!/bin/sh
			echo -e "OK! \c" # -e 开启转义 \c 不换行
			echo "It is a test"
			输出结果：

			OK! It is a test
			
		3.5.6 显示结果定向至文件
			echo "It is a test" > myfile
			
		3.5.7 原样输出字符串，不进行转义或取变量(用单引号)
				echo '$name\"'
				输出结果：

				$name\"
	3.6 Shell printf 命令 
		https://www.runoob.com/linux/linux-shell-printf.html
4. Linux下Shell的for循环语句 
	https://www.cnblogs.com/EasonJim/p/8315939.html
	
5. linux shell 脚本命令错误后继续执行
	5.1 linux shell 脚本命令错误后禁止继续执行
6. Shell脚本中的分号使用
	https://www.cnblogs.com/EasonJim/p/8315896.html
	如果写成单行，需要用分号进行区分，如果写成块，那么则用换行符替代了分号
7. 执行脚本时将指令输出
	bash -x xxx-name.sh 