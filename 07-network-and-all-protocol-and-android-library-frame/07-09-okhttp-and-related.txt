1.
	1.1 https://square.github.io/okhttp/
		
	1.2 okHttp各个module介绍
		https://blog.csdn.net/wei7017406/article/details/73189197 
	1.3 
		okHttp 是maven项目
		使用IntelliJ IDEA打开工程。
		转到【3】
	1.4 Android网络框架对比
		https://www.jianshu.com/p/3842b63c69c6 
2.关于OKHTTP3（一）源码编译
	https://www.freesion.com/article/88181387287/ 
	
	2.1 http原理浅谈：导入okhttp的源码到Android Studio并对框架进行定制 
		https://www.jianshu.com/p/fb6e9c99f800 
		
		测试验证：
		验证工程位置：*\Okhttp390Test
		框架版本：okhttp-3.9.0;okio-1.13.0;
		a,okhttp3.internal.Version;提示找不到
			这个okhttp源码项目编译出来的，可以从编译好的。androidstudio gradle下载好的对应版本的okhttp-3.9.0-sources.jar中拷贝过来用。
		b,org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement 错误: 程序包org.codehaus.mojo.animal_sniffer不存在 
			android studio使用中遇见的错误 
			https://www.tqwba.com/x_d/jishu/203926.html 
			http://stackoverflow.com/questions/29886882/android-studio-1-2-rc-proguard-warnings-on-squares-okio-library-reference
		
			查看：okio下的pom.xml
				<dependency>
				  <groupId>com.google.code.findbugs</groupId>
				  <artifactId>jsr305</artifactId>
				  <scope>provided</scope>
				</dependency>
				<dependency>
				  <groupId>org.codehaus.mojo</groupId>
				  <artifactId>animal-sniffer-annotations</artifactId>
				  <optional>true</optional>
				</dependency>
				
				版本：
				<version>1.1</version>
				
				gradle配置这个依赖库即可：
					implementation 'org.codehaus.mojo:animal-sniffer-annotations:1.1'
				属于maven仓库的jar，添加mavenCentral()仓库。
				
3. OKHTTP3（一）源码分析
	https://www.freesion.com/article/2734906565/ 
	3.1 Okhttp3源码分析
		https://www.jianshu.com/p/b0353ed71151 
	
	3.2 深入理解OkHttp源码及设计思想
		https://www.jianshu.com/p/fa0dcbfe05cd 
	3.3 
		okhttp3.9.0调试工程
		*\okhttp-source-research\okhttp-parent-3.9.0
		3.3.1 add unicode use
			okhttp3.RequestTest#unicodeTest
			
		okhttp3.mockwebserver.MockWebServerTest#regularResponseAndDisconnect
		
		"GET / HTTP/1.1" 在哪设置的？
		assertEquals("GET / HTTP/1.1", request.getRequestLine())
	3.4 使用OkHttp中的MockWebServer进行接口模拟测试
		https://blog.csdn.net/Mr_Tony/article/details/116562455 
		a，OkHttp3系列（二）MockWebServer使用
			https://www.cnblogs.com/weegee/p/13410049.html 
	3.5 源码分析疑问记录：
		okhttp-urlconnection
		okhttp3.OkUrlFactoryTest#testURLFilterRedirect
		怎么理解。

		okhttp3.Dispatcher#maxRequestsPerHost如何理解。
	3.6 okhttp-tests
		3.6.1,okhttp3.CallTest#getReturns500
			executeSynchronously("/");//换成其它地址就不行。为啥呢?
			通过【okhttp3.CallTest#executeSynchronously(java.lang.String, java.lang.String...)】添加打印url；
			是自动通过serverSocket获取的服务端的主机和端口。如：http://127.0.0.1:29937/，其中/就追加在地址后面
		3.6.2 okhttp3.CallTest#postBodyRetransmittedAfterAuthorizationFail()
			responded: HTTP/1.1 401 Client Error //如何理解？
			[部分参考]：【07-01-http-and-tools.txt;01.1】a,Http 401错误重现实验及解决办法
		3.6.3 okhttp3.CallTest#recoverWhenRetryOnConnectionFailureIsTrue
			a,有没有【server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));】效果，原理？
				对比日志见：okhttp-parent-3.9.0工程的平级目录【temp-log-analyse-file】
			b,与okhttp3.OkHttpClient#retryOnConnectionFailure相关处有哪些？
			c,与okhttp3.internal.http.RetryAndFollowUpInterceptor相关处有哪些？
	3.7
	3.x. 
		java.net.Proxy.Type 
		DIRECT,
        HTTP,
        SOCKS;
		三种类型的区别。
		
4. 进阶之光。
	测试适配：android-advanced-light\chapter_5\MoonOkHttp3
		程序转到测试项目目录（用java程序就行）：com.demo.okhttp390test.andvancelighttest 
5. okhttp源码导入及Maven构建文件pom.xml的格式
	https://blog.csdn.net/kcstrong/article/details/82189733 
6.OkHttp面试总结搜集。
	6.1 面试还没搞懂OkHttp原理？看完这篇文章全明白了
		https://www.cnblogs.com/Android-Alvin/p/12530226.html 
	6.2 腾讯被面Okhttp3 惨挂，我总结了一套学习心得
		https://www.cnblogs.com/Android-Alvin/p/13353754.html 
	6.3 谈谈OKHttp的几道面试题
		https://www.jianshu.com/p/7cb9300c6d71 
7. OKHTTP好文推荐
	https://juejin.cn/post/6844903525034491918 
8.Android  okHttp封装及关联框架
	8.1 Android 一个改善的okHttp封装库
		https://blog.csdn.net/lmj623565791/article/details/49734867 
	8.2 okhttp二次封装框架推荐	
		Android基于OkHttpUtils网络请求的二次封装
			https://www.php1.cn/detail/Android_JiYu_OkH_406c1fc8.html
			
	8.3 
		https://github.com/jeasonlzy/okhttp-OkGo
		https://github.com/hongyangAndroid/okhttputils
		
		https://github.com/getActivity/EasyHttp
			[不同网络请求框架之间的对比 功能或细节	EasyHttp	Retrofit	OkGo]
			【作者的其他开源项目】https://github.com/getActivity/EasyHttp
		https://github.com/liangjingkanji/Net
			[OkHttp最佳实践] Android最好的网络请求工具, 比 Retrofit/OkGo 更简单易用
		https://github.com/kymjs/RxVolley
			
		https://github.com/jgilfelt/chuck
			An in-app HTTP inspector for Android OkHttp clients
			
		https://github.com/franmontiel/PersistentCookieJar
			A persistent CookieJar implementation for OkHttp 3 based on SharedPreferences.
			
		https://github.com/liujingxing/rxhttp
			ased on OkHttp encapsulation, support Kotlin Coroutines、RxJava2、RxJava3; 30s to get started.
			
		https://github.com/handsometong/okhttpUpLoader
			实现okhttp断点上传
		https://github.com/ausboyue/Okhttp-Multiple-Thread-Download-Demo
			Android Okhttp多线程断点续传下载Demo
			
			https://github.com/Microstrong0305/OKHttp_DownloadFile
				（1）用OKHttp实现大文件下载（2）OKHttp实现文件下载的断点续传（3）取消下载时删除已下载的文件
			https://github.com/lizhangqu/CoreProgress
				OkHttp upload and download progress support
				
			https://github.com/Tamicer/FastDownloader
				基于Okhttp, 结合Retrofit，使用Okio ，简化处理I/O操作，加入多种设计模式，实现基于链式的android平台多线程下载利器
		https://github.com/wildma/okhttps
			OkHttp请求自签名的https网站，Glide加载自签名的https图片
			
		https://github.com/DingProg/NetworkCaptureSelf
			基于OKHttp的实用抓包小工具，你值得拥有
			
		https://github.com/JessYanCoding/ProgressManager
			Listen the progress of downloading and uploading in Okhttp, c
			ompatible Retrofit and Glide (一行代码即可监听 App 中所有网络链接的上传以
9. okhttp demo or project
	https://github.com/gslovemy/RxJavaRetrofitOkhttpMvp
		时下流行的RxJava+Retrofit+Okhttp+Mvp封装的一个demo,简单,易理解,深度解耦,方便迭代
	https://github.com/wzgiceman/RxjavaRetrofitDemo-master
			Retrofit+Rxjava+okhttp终极封装(Gson方案)
	https://github.com/wzgiceman/RxjavaRetrofitDemo-string-master
		Rxjava+ReTrofit+okHttp终极封装（String方案）
	使用okhttp作为Volley底层请求框架的煎蛋高仿客户端
		https://github.com/ZhaoKaiQiang/JianDan_OkHttpWithVolley
	
	https://github.com/xchengDroid/retrofit-helper
		xchengDroid/retrofit-helper
		Retrofit、dynamic baseUrl、Lifecycle for Activity and Fragment 、优雅的管理Http请求
	基于RxJava+Retrofit+OkHttp实现的纯净知乎日报客户端
				https://github.com/laucherish/PureZhihuD
		【12-android-learn-resource-and-books-record.txt】【0.13】
		
10 retorfit
	
	10.1 
		https://github.com/square/retrofit
	10.2 
	https://github.com/JessYanCoding/RetrofitUrlManager
		Let Retrofit support multiple baseUrl and can be change the baseUrl at runtime 
		(以最简洁的 Api 让 Retrofit 同时支持多个 BaseUrl…
		
	https://github.com/tough1985/RxjavaRetrofitDemo
		A demo show how to use Retrofit with Rxjava
	https://github.com/LianjiaTech/retrofit-spring-boot-starter
		A spring-boot starter for retrofit, supports rapid integration and feature enhancements.（适用于retrofit的spring-boot启动器
	https://github.com/zhpanvip/Retrofit2
		Rxjava2+Retrofit2二次封装。动态代理实现token过期自动刷新，以及https相关配置，https单双向认证等
		
	10.5 retrofit使用
		10.5.1 如何用Retrofit直接获得服务器返回的Json数据（字符串），不进行Gson转javabean.
			参考：https://www.codenong.com/cs106122548/
				https://blog.csdn.net/qq_29983773/article/details/73245516
			调试程序：
				com.example.liuwangshu.moonretrofit.MainActivity#clickGetIpInformationForJson
		10.5.2 	
			 @GET()注解值为空，会报错.。需要从url中移动一部分过来。
			 如果baseUrl写完整了，这个注解可以写成@GET("?")