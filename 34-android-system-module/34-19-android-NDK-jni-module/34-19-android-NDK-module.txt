01 ndk资源
	01.1 ndk-samples
		https://github.com/android/ndk-samples/tree/master 
		
		原项目地址：https://github.com/googlesamples/android-ndk
		原说明文档：https://github.com/googlesamples/android-ndk/blob/master/README.md
	01.2 ndk下载
		https://developer.android.google.cn/ndk/downloads/
		网站含有修订说明。
	01.3 如需详细了解如何使用 JNI 框架，请参阅 Android JNI 提示。
		https://developer.android.com/training/articles/perf-jni
		
	01.4 NDK Samples
		01.4.1 GoogleSamples - NDK Samples
			https://www.jianshu.com/p/05515962006c/ 
			
1.NDK接口参照：

	https://developer.android.google.cn/ndk/reference/group/audio

	使用NDK接口音频采集过程，可以参照：

	https://developer.android.google.cn/ndk/guides/audio/aaudio/aaudio 

2. JNI和NDK的区别 
	https://blog.csdn.net/ithomer/article/details/6828830
	
	参考推荐：（博文有链接。）

	JNI Tutorial

	Android NDK之JNI使用例子

	Android 使用NDK R5开发JNI应用详解

	Android NDK Hello
3. NDK开发之CMake和传统 JNI在目录结构和配置文件上的区别
	https://blog.csdn.net/windzhang1028/article/details/80015453
	3.1 android studio项目中CMake和NDK-build之间的区别
		http://www.cocoachina.com/cms/wap.php?action=article&id=65368
	
	3.2 Android Studio 使用ndk-build构建Jni
		3.2.1 ndk-build官网向导
			https://developer.android.com/ndk/guides/ndk-build
			
		3.2.2 Android Studio 使用ndk-build构建Jni
			https://blog.csdn.net/tongseng/article/details/82633221
		3.2.3 Android Studio实现JNI，并编译出本地库So
			https://blog.csdn.net/zxl1173558248/article/details/81701967
			
	3.3 javah命令生成.h头文件，javap生成签名文件
		用javah命令生成.h文件：首先 cd app/build/intermediates/classes/debug 进入到debug目录，然后 javah com.chenxin.testndk.MyJni 生成.h文件
			
			如果使用MainActivity中添加本地方法，使用javah无法生成.h，
				错误: 无法访问android.app.Activity
				找不到android.app.Activity的类文件
				
				是打开命令终端的位置不对，应该是：\src\main\java下打开终端。在执行javah
				
			android  studio 配置javah
			javas 
			android studio external tool 自定义工具（Javah命令）
			https://blog.csdn.net/fangyoayu2013/article/details/51094061
				设置界面找到External Tools
				Program: $JDKPath$\bin\javah.exe
				Parameters: -classpath . -jni -o $ModuleFileDir$/src/main/jni/$Prompt$ $FileClass$
				Working directory: $ModuleFileDir$\src\main\java
				Parameters的另外一种写法 -classpath . -jni -d $ModuleFileDir$/src/main/jni $FileClass$
				
				配置好后，提示找不到。
			用javap生成生成java方法的JNI签名
				https://blog.csdn.net/jemenchen/article/details/86690390 
				
				javap 要在java文件对应生成的class文件所在包的最上层目录下执行。
				javap -p -s  org.jemen.test.Test          替换成自己的。若不在当前文件夹则可用-classpath指明class文件的位置。
	3.4 Android Studio实现JNI，并编译出本地库So
		https://blog.csdn.net/zxl1173558248/article/details/81701967  
		
	3.5 向您的项目添加 C 和 C++ 代码
		使用cmake,androidstudio,nkd
		https://developer.android.com/studio/projects/add-native-code?utm_source=android-studio

3. Android NDK目录结构解析
	
	
	3.1 Android NDK学习（一）：目录结构解析
		https://www.cnblogs.com/renhui/p/9156398.html
		
		ndk-build：该Shell脚本是Android NDK构建系统的起始点，一般在项目中仅仅执行这一个命令就可以编译出对应的动态链接库库了。
		ndk-gdb：该Shell允许用GUN调试器调试Native代码，并且可以配置到编辑器中，做到像调试Java代码一样调试Native代码。
		ndk-stack：该Shell脚本可以帮助分析Native代码崩溃时的堆栈信息。
		build：该目录包含NDK构建系统的所有模块。
		platforms：该目录包含支持不同Android目标版本的头文件和库文件，NDK构建系统会根据具体的配置来引用指定平台下的头文件和库文件。
		toolchains：该目录包含目前NDK支持的不同平台下的交叉编辑器——ARM、x86、MIPS，其中比较常用的是ARM和x86，构建系统会根据具体的配置选择不同的交叉编辑器。
4. ndk-build	
	4.0 资源
		4.0.1 ndk-build 脚本
			https://developer.android.com/ndk/guides/ndk-build
	4.1 Android Studio 使用ndk-build构建Jni
		https://blog.csdn.net/tongseng/article/details/82633221 
		
		创建一个类Jni，用来声明native方法。
		用javah命令生成.h文件，在源文件和包平级目录处，执行javah 带上包名的类。
		在jni目录下分别创建Android.mk文件，Application.mk文件。
		打开android studio的终端，进入到jni文件夹，cd app-module/src/main/jni ,然后 输入 ndk-build 回车ok,so就生成了:
		
		接下来就是使用so了，首先先与.so关联起来，有两种方法:
		第一种方法，app/src/main目录下面创建一个jniLibs文件夹，将刚才生成的libs下的所有文件夹拷贝或者剪切到这里面，然后在 build.gradle中加入:
		
			android {
			   ......
				sourceSets {
					main() {
						jni.srcDirs = [] //屏蔽掉默认的jni编译生成过程
					}
				}
			}
			
		第二种方法，直接在gradle中加入:
			android {
			   ......
				sourceSets {
					main() {
						jniLibs.srcDirs = ['src/main/libs']
						jni.srcDirs = [] //屏蔽掉默认的jni编译生成过程
					}
				}
			}
	4.2 androidstudio配置application.mk android.mk 
		Android studio 使用android.mk来配置ndk
		https://blog.csdn.net/qxqsunshine/article/details/78565524  
		
		配合博客:
		android studio 已有NDK代码并且包含application.mk android.mk 使用ndkcmd 直接编译
		https://blog.csdn.net/tt11212/article/details/78049096 
		
		直接配置命令执行函数及参数。
		
		
	
5. 关于NDK目录设置
	5.1 ANDROID_NDK_ROOT environment variable
	5.2 Define location with ndk.dir in the local.properties file
		Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable
		
6. Android开发中libs和jinLibs文件夹的作用详解
		https://www.jb51.net/article/123417.htm
		
		libs: librarys

		用来存放三方库的地方，比如 *.jar 和 *.aar。
		
		jniLibs: java native interface librarys

		Android Studio 新添加的，默认用来存放 .so 文件。
		
		Q: 然而我们经常能看见将 *.so 文件放在 libs 中。那有何必多一个这个 jniLibs 目录呢。
		A: 在 AS 中它会自动去加载 jniLibs 目录中的 *.so 文件。如果你放在了其它任何目录，你必须要告诉它你将这些文件放在那里了（重定向）。
		在 module#build.gradle 中添加:
		sourceSet {
		  main {
			// 这里我写 `libs`，它就会去 `libs` 目录中找，你也可以放在其它任何目录中。
			jniLibs.srcDirs = ['libs'] 
		  }
		}
		sourceSet {
		  main {
			// 这里我写 `libs`，它就会去 `libs` 目录中找，你也可以放在其它任何目录中。
			jniLibs.srcDirs = ['libs'] 
		  }
		}
		最好还是让其各司其职，各尽其责。这样你的项目看起来也比较整洁。
		
	6.2 Android关于libs，jniLibs库的基本使用说明及冲突解决
		https://www.pianshen.com/article/7127343390/ 
		
		
		A:如果是在eclipse中，需要放到libs下对应库的目录。 
		 如果是在Android Studio中，则会默认匹配main下的jniLibs目录，如果没有目录需要自己手动创建
		
		B:同时制定libs和jniLibs，需要进行合并保留一个即可。
7. 使用IDA反编译.so文件并修改
	https://www.jianshu.com/p/52b91733fec1

8. 架构和 CPU
	8.1 https://developer.android.google.cn/ndk/guides/arch.html 
	
	8.2 android ndk 支持的abi
		比如：Supported ABIs are [arm64-v8a, armeabi, armeabi-v7a, mips, mips64, x86, x86_64].
		不同于arch,cpu.
9.ndk 不同版本差异及注意事项记录
	9.1 ndk/21.3.6528147 GCC is no longer supported
		https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md 
		ndk-r18及以后的版本不支持GCC

10. NDK生成的so动态库调试
	10.1 NDK生成的so动态库怎么调试
		https://blog.csdn.net/jiuaiwo1314/article/details/105121257/ 
		
		需要用到工具：
		Android\SDK\platform-tools\adb
		NDK
		so生成库中间文件：obj\local\armeabi-v7a  到这层即可，arm v8 同理
		安卓手机肯定不能少了，还有APK 文件
		步骤：

		1. 启动adb命令，如下：
			adb logcat | ndk-stack -sym D:\workplace\****\obj\local\armeabi-v7a
		2. 启动app，运行至崩溃地方

		3.如果NDK崩溃即可在终端打印 堆栈信息，进行分析即可
x. 一些记录
	x.1 
		环境
		as3.5.1，gradle 4.4,gradle plugin 3.1.3;		
		android.useDeprecatedNdk=true
		ndk编译异常。

		Error: Flag android.useDeprecatedNdk is no longer supported and will be removed in the next version of Android Studio.  Please switch to a supported build system.
		Consider using CMake or ndk-build integration. For more information, go to:
		 https://d.android.com/r/studio-ui/add-native-code.html#ndkCompile
		 To get started, you can use the sample ndk-build script the Android
		 plugin generated for you at:
		 D:\juying\as1_5project\jni\MyJniDemo01\app\build\intermediates\ndk\debug\Android.mk
		Alternatively, you can use the experimental plugin:
		 https://developer.android.com/r/tools/experimental-plugin.html
		To continue using the deprecated NDK compile for another 60 days, set 
		android.deprecatedNdkCompileLease=1609233712821 in gradle.properties
		
		
		4.1.2 Experimental Plugin 使用向导(转)
			https://blog.csdn.net/zwdlpyy/article/details/52778722
			
			实际正规文档完全引用自：http://tools.android.com/tech-docs/new-build-system/gradle-experimental?pli=1#TOC-Gradle-Requirements 
			
			涉及到内容：There are significant changes to the DSL of the plugin. 
			
			涉及到概念：DSL的概念
			https://www.cnblogs.com/feng9exe/p/10901595.html
				DSL 其实是 Domain Specific Language 的缩写，中文翻译为领域特定语言（下简称 DSL）
				

	x.2 
		环境
		as3.5.1，gradle 4.4,gradle plugin 3.1.3;		
		ndk编译异常。
		
		Error: Your project contains C++ files but it is not using a supported native build system.
		Consider using CMake or ndk-build integration. For more information, go to:
		 https://d.android.com/r/studio-ui/add-native-code.html
		Alternatively, you can use the experimental plugin:
		 https://developer.android.com/r/tools/experimental-plugin.html


