二、硬件抽象层
	1. 在Ubuntu上为Android系统编写Linux内核驱动程序 
		https://blog.csdn.net/Luoshengyang/article/details/6568411
		1.1 在Ubuntu上为Android系统编写Linux内核驱动程序 
		 五.在hello目录中新增Kconfig和Makefile两个文件，其中Kconfig是在编译前执行配置命令make menuconfig时用到的，而Makefile是执行编译命令make是用到的：

	       Kconfig文件的内容

	       config HELLO
	           tristate "First Android Driver"
	           default n
	           help
	           This is the first android driver.
	      Makefile文件的内容
	      obj-$(CONFIG_HELLO) += hello.o
	      在Kconfig文件中，tristate表示编译选项HELLO支持在编译内核时，hello模块支持以模块、内建和不编译三种编译方法，默认是不编译，因此，在编译内核前，我们还需要执行make menuconfig命令来配置编译选项，使得hello可以以模块或者内建的方法进行编译。
	      在Makefile文件中，根据选项HELLO的值，执行不同的编译方法。
	      六. 修改arch/arm/Kconfig和drivers/kconfig两个文件，在menu "Device Drivers"和endmenu之间添加一行：
	      source "drivers/hello/Kconfig"
	        这样，执行make menuconfig时，就可以配置hello模块的编译选项了。. 
	      七. 修改drivers/Makefile文件，添加一行：
	        obj-$(CONFIG_HELLO) += hello/
	      八. 配置编译选项：
	        USER-NAME@MACHINE-NAME:~/Android/kernel/common$ make menuconfig
	        找到"Device Drivers" => "First Android Drivers"选项，设置为y。
	        注意，如果内核不支持动态加载模块，这里不能选择m，虽然我们在Kconfig文件中配置了HELLO选项为tristate。要支持动态加载模块选项，必须要在配置菜单中选择Enable loadable module support选项；在支持动态卸载模块选项，必须要在Enable loadable module support菜单项中，选择Module unloading选项。
	      九. 编译：
	        USER-NAME@MACHINE-NAME:~/Android/kernel/common$ make
	        编译成功后，就可以在hello目录下看到hello.o文件了，这时候编译出来的zImage已经包含了hello驱动。
	      十. 参照在Ubuntu上下载、编译和安装Android最新内核源代码（Linux Kernel）一文所示，运行新编译的内核文件，验证hello驱动程序是否已经正常安装：
	        USER-NAME@MACHINE-NAME:~/Android$ emulator -kernel ./kernel/common/arch/arm/boot/zImage &
	        USER-NAME@MACHINE-NAME:~/Android$ adb shell
	        进入到dev目录，可以看到hello设备文件：
	        root@android:/ # cd dev
	        root@android:/dev # ls
	        进入到proc目录，可以看到hello文件：
	        root@android:/ # cd proc
	        root@android:/proc # ls
	        访问hello文件的值：
	        root@android:/proc # cat hello
	        0
	        root@android:/proc # echo '5' > hello
	        root@android:/proc # cat hello
	        5
	        进入到sys/class目录，可以看到hello目录：
	        root@android:/ # cd sys/class
	        root@android:/sys/class # ls
	        进入到hello目录，可以看到hello目录：
	        root@android:/sys/class # cd hello
	        root@android:/sys/class/hello # ls
	        进入到下一层hello目录，可以看到val文件：
	        root@android:/sys/class/hello # cd hello
	        root@android:/sys/class/hello/hello # ls
	        访问属性文件val的值：
	        root@android:/sys/class/hello/hello # cat val
	        5
	        root@android:/sys/class/hello/hello # echo '0'  > val
	        root@android:/sys/class/hello/hello # cat val
	        0
	        至此，我们的hello内核驱动程序就完成了，并且验证一切正常。这里我们采用的是系统提供的方法和驱动程序进行交互，也就是通过proc文件系统和devfs文件系统的方法，下一篇文章中，我们将通过自己编译的C语言程序来访问/dev/hello文件来和hello驱动程序交互，敬请期待。
			————————————————
			版权声明：本文为CSDN博主「罗升阳」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
			原文链接：https://blog.csdn.net/Luoshengyang/article/details/6568411
	2. 在Ubuntu上为Android系统内置C可执行程序测试Linux内核驱动程序
		https://blog.csdn.net/luoshengyang/article/details/6571210
		
	3. 在Ubuntu上为Android增加硬件抽象层（HAL）模块访问Linux内核驱动程序
		https://blog.csdn.net/luoshengyang/article/details/6573809
		
			进入到在hardware/libhardware/include/hardware目录，新建hello.h文件.
			进入到hardware/libhardware/modules目录，新建hello目录，并添加hello.c文件.
			继续在hello目录下新建Android.mk文件.
		
		3.1 修改权限。
			DEVICE_NAME定义为"/dev/hello"。由于设备文件是在内核驱动里面通过device_create创建的，而device_create创建的设备文件默认只有root用户可读写，而hello_device_open一般是由上层APP来调用的，这些APP一般不具有root权限，这时候就导致打开设备文件失败：

		  Hello Stub: failed to open /dev/hello -- Permission denied.
		  解决办法是类似于Linux的udev规则，打开Android源代码工程目录下，进入到system/core/rootdir目录，里面有一个名为ueventd.rc文件，往里面添加一行：
		  /dev/hello 0666 root root
		  
		  3.1.3 在镜像文件中修改权限。
			1. ramdisk.img是gzip文件。需要使用gunzip进行解压。
				mv ./out/target/product/generic/ramdisk.img ./ramdisk.img.gz
				先修改为ramdisk.img.gz
				再解压,得到ramdisk.img
			2. 还原ramdisk.img镜像文件
				解压得到的ramdisk.img是cpio格式的归档文件。用命令cpio解归档
				mkdir ramdisk
				cd ./ramdisk/
				cpio -i -F ../ramdisk.img
				解除归档后的文件保存在ramdisk/下。
			3. ueventd.rc文件，往里面添加一行：
				/dev/hello 0666 root root
			4. 重新打包ramdisk.img镜像文件。
				是1,2的逆过程。即先把目录归档为cpio文件，再压缩为gzip文件。
				eink@android/ramdisk$	rm -f ../ramdisk.img
				eink@android/ramdisk$	rm -f find . | cpio -o -H  newc > ../ramdisk.img.unzip 
				eink@android/ramdisk$	rm cd ..
				eink@android$	gzip -c ./ramdisk.img.unzip >  ./ramdisk.img.gz
				eink@android$	rm -f ./ramdisk.img.unzip 			
				eink@android$	rm -R ./ramdisk		
				eink@android$	mv ./ramdisk.img.gz ./out/target/product/generic/ramdisk.img	
				
		3.2 *device = &(dev->common); 这个不对吧，应该是这样吧*device = dev 
			一样的，common是dev是第一个成员变量，它们的地址是一样的。
			
		3.3，mkdir: cannot create directory ‘out/target/product’: Permission denied
			eink用户，但out目录为root用户创建的。可以修改文件所属用户及用户组。
			drwxrwxrw-  6 root root  4096 9月  16 08:31 out/
			
			chown -R 所有者用户名.组名 文件夹名称
			例如：chown -R zdz.nginx KooBox
			
	4.在Ubuntu为Android硬件抽象层（HAL）模块编写JNI方法提供Java访问硬件服务接口 
		https://blog.csdn.net/luoshengyang/article/details/6575988
		
		4.1,步骤
			4.1.1 进入到frameworks/base/services/jni目录，新建com_android_server_HelloService.cpp文件：
				vi com_android_server_HelloService.cpp
				在com_android_server_HelloService.cpp文件中，实现JNI方法。注意文件的命令方法，com_android_server前缀表示的是包名，表示硬件服务HelloService是放在frameworks/base/services/java目录下的com/android/server目录的，即存在一个命令为com.android.server.HelloService的类。这里，我们暂时略去HelloService类的描述，在下一篇文章中，我们将回到HelloService类来。简单地说，HelloService是一个提供Java接口的硬件访问服务类.
				
				注意，在hello_init函数中，通过Android硬件抽象层提供的hw_get_module方法来加载模块ID为HELLO_HARDWARE_MODULE_ID的硬件抽象层模块，其中，HELLO_HARDWARE_MODULE_ID是在<hardware/hello.h>中定义的。Android硬件抽象层会根据HELLO_HARDWARE_MODULE_ID的值在Android系统的/system/lib/hw目录中找到相应的模块，然后加载起来，并且返回hw_module_t接口给调用者使用。在jniRegisterNativeMethods函数中，第二个参数的值必须对应HelloService所在的包的路径，即com.android.server.HelloService。
			4.1.2 修改同目录下的onload.cpp文件，首先在namespace 	android增加register_android_server_HelloService函数声明
				namespace android {
				  ..............................................................................................

				  int register_android_server_HelloService(JNIEnv *env);

				  };

				  在JNI_onLoad增加register_android_server_HelloService函数调用：
				  extern "C" jint JNI_onLoad(JavaVM* vm, void* reserved)
				  {
				   .................................................................................................
				   register_android_server_HelloService(env);
				   .................................................................................................
				  }
				  这样，在Android系统初始化时，就会自动加载该JNI方法调用表。
				
				4.1.2.1 extern "C" 含义及用法？
			4.1.3 修改同目录下的Android.mk文件，在LOCAL_SRC_FILES变量中增加一行
				LOCAL_SRC_FILES:= \
				  com_android_server_AlarmManagerService.cpp \
				  com_android_server_BatteryService.cpp \
				  com_android_server_InputManager.cpp \
				  com_android_server_LightsService.cpp \
				  com_android_server_PowerManagerService.cpp \
				  com_android_server_SystemServer.cpp \
				  com_android_server_UsbService.cpp \
				  com_android_server_VibratorService.cpp \
				  com_android_server_location_GpsLocationProvider.cpp \
				  com_android_server_HelloService.cpp \
				  onload.cpp
			4.1.4 
				 编译和重新找亿system.img：
				   USER-NAME@MACHINE-NAME:~/Android$ mmm frameworks/base/services/jni
				  USER-NAME@MACHINE-NAME:~/Android$ make snod
	5.在Ubuntu上为Android系统的Application Frameworks层增加硬件访问服务 
			https://blog.csdn.net/Luoshengyang/article/details/6578352
		5.1 step
			5.1.1 
				在Android系统中，硬件服务一般是运行在一个独立的进程中为各种应用程序提供服务。因此，调用这些硬件服务的应用程序与这些硬件服务之间的通信需要通过代理来进行。为此，我们要先定义好通信接口。进入到frameworks/base/core/java/android/os目录，新增IHelloService.aidl接口定义文件：
			5.1.2 
				返回到frameworks/base目录，打开Android.mk文件，修改LOCAL_SRC_FILES变量的值，增加IHelloService.aidl源文件
				core/java/android/os/IHelloService.aidl /
			5.1.3 
				编译IHelloService.aidl接口：
				 USER-NAME@MACHINE-NAME:~/Android$ mmm frameworks/base
			   这样，就会根据IHelloService.aidl生成相应的IHelloService.Stub接口。
			   
			5.1.4 
				进入到frameworks/base/services/java/com/android/server目录，新增HelloService.java文件
				
			5.1.5 
				修改同目录的SystemServer.java文件，在ServerThread::run函数中增加加载HelloService的代码
				@Override

				 public void run() {
				 ....................................................................................

						try {
							  Slog.i(TAG, "DiskStats Service");

							  ServiceManager.addService("diskstats", new DiskStatsService(context));

						} catch (Throwable e) {
							  Slog.e(TAG, "Failure starting DiskStats Service", e);

						}

						try {

							  Slog.i(TAG, "Hello Service");

							  ServiceManager.addService("hello", new HelloService());

						} catch (Throwable e) {

							  Slog.e(TAG, "Failure starting Hello Service", e);

						}

				 ......................................................................................

				 }  
			5.1.6
				编译HelloService和重新打包system.img：

				USER-NAME@MACHINE-NAME:~/Android$ mmm frameworks/base/services/java

				USER-NAME@MACHINE-NAME:~/Android$ make snod
	6. 在Ubuntu上为Android系统内置Java应用程序测试Application Frameworks层的硬件服务
		https://blog.csdn.net/Luoshengyang/article/details/6580267
		6.1 主程序是src/shy/luo/hello/Hello.java
			界面布局文件res/layout/main.xml：
			字符串文件res/values/strings.xml：
			程序描述文件AndroidManifest.xml：
		6.2 
			将Hello目录拷贝至packages/experimental目录，新增Android.mk文件：
			USER-NAME@MACHINE-NAME:~/Android/packages/experimental/hello$ vi Android.mk
			Android.mk的文件内容如下：
			LOCAL_PATH:= $(call my-dir)
			include $(CLEAR_VARS)
			LOCAL_MODULE_TAGS := optional
			LOCAL_SRC_FILES := $(call all-subdir-java-files)
			LOCAL_PACKAGE_NAME := Hello
			include $(BUILD_PACKAGE)
		6.3 
			编译：
			USER-NAME@MACHINE-NAME:~/Android$ mmm packages/experimental/Hello
			编译成功后，便可以在out/target/product/generic/system/app目录下看到Hello.apk文件了。
		6.4 
			重新打包系统镜像文件system.img： 
			USER-NAME@MACHINE-NAME:~/Android$ make snod
				重新打包后的system.img文件就内置了Hello.apk文件了。
		6.5 
			运行Android模拟器：
			USER-NAME@MACHINE-NAME:~/Android$ emulator -kernel kernel/common/arch/arm/boot/zImage &
三、Android智能指针
	3.1 Android智能指针——读书笔记
		【csdn 低调小一】
		https://blog.csdn.net/wzy_1988/article/details/43736137
		
		3.1.1 我们首先来看一下LightRefBase类的实现，源码位置为/system/core/include/utils/RefBase.h
			inline void decStrong(const void* id) const {
			if (android_atomic_dec(&mCount) == 1) {
				delete static_case<const T*>(this);
				}
			}
			摘取内容：static_case的含义及用法？
			
		3.1.2 lightpointer.cpp

			#include <stdio.h>
			#include <utils/RefBase.h>

			using namespace android;

			class LightClass : public LightRefBase<LightClass>
			{
			public:
				LightClass()
				{
					printf("Construct LightClass Object.");
				}

				virtual ~LightClass()
				{
					printf("Destory LightClass Object.");
				}
			};

			int main(int argc, char** argv)
			{
				LightClass* pLightClass = new LightClass();
				sp<LightClass> lpOut = pLightClass;

				printf("Light Ref Count:%d.\n", pLightClass->getStrongCount());

				{
					sp<LightClass> lpInner = lpOut;
					printf("Light Ref Count:%d.\n", pLightClass->getStrongCount());
				}

				printf("Light Ref Count:%d.\n", pLightClass->getStrongCount());

				return 0;
			}
		3.1.3 Android.mk
			LOCAL_PATH := $(call my-dir)
			include $(CLEAR_VARS)

			LOCAL_MODULE_TAGS := optional
			LOCAL_MODULE := lightpointer
			LOCAL_SRC_FILES := lightpointer.cpp
			LOCAL_SHARED_LIBRARIES := \
				libcutils \
				libutils

			include $(BUILD_EXECUTABLE)
		3.1.4 编译、打包
			编译后在out/target/product/generic/system/bin目录下。
			打包后在out/target/product/generic/system.img中。
			
			或者直接push到小机器的/system/bin目录下。
	3.2 weightpointer
		# ./weightpointer
		main Test Strong Class: 
		Construct StrongClass Object.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 0.
		printRefCountWeak Ref Count: 1.
		printRefCount------------end.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 1.
		printRefCountWeak Ref Count: 2.
		printRefCount------------end.
		Destory StrongClass Object.
		printRefCount-----------start.
		printRefCountStrong Ref Count: -1345035140.
		printRefCountWeak Ref Count: -1345035140.
		printRefCount------------end.
		testStrongClass spOut:0x0.
		main Test Weak Class: 
		Construct WeakClass Object.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 0.
		printRefCountWeak Ref Count: 1.
		printRefCount------------end.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 1.
		printRefCountWeak Ref Count: 2.
		printRefCount------------end.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 0.
		printRefCountWeak Ref Count: 1.
		printRefCount------------end.
		testWeakClass spOut: 0xa528.
		Destory WeakClass Object.
		main Test Forever Class: 
		Construct ForeverClass Object.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 0.
		printRefCountWeak Ref Count: 1.
		printRefCount------------end.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 1.
		printRefCountWeak Ref Count: 2.
		printRefCount------------end.
		printRefCount-----------start.
		printRefCountStrong Ref Count: 0.
		printRefCountWeak Ref Count: 0.
		printRefCount------------end.
		Destory ForeverClass Object.
		# 
		
		其中：
		printRefCountStrong Ref Count: -1345035140.
		printRefCountWeak Ref Count: -1345035140.
		是否正确，应该分别为0,1。

五、第五章binder
	5.1 Android进程间通信（IPC）机制Binder简要介绍和学习计划
		5.1.1 Android深入浅出之Binder机制
			https://www.cnblogs.com/innost/archive/2011/01/09/1931456.html
	5.2 Android Binder设计与实现 – 设计篇
		https://www.cnblogs.com/lao-liang/p/5039131.html
		
		5.2.2 
			（原创）Android Binder设计与实现 - 实现篇（1）
			https://www.cnblogs.com/albert1017/p/3849585.html
